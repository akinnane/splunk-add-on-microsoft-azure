{"alert_action_builder": {"modular_alerts": [{"description": "Stop an Azure Virtual Machine", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAACN0lEQVRYR2NkGGSAcZC5h2HUQYRiZDSEhlcINTQ0MFlaWnIS8hWx8i9fvmSIi4v7xsDA8B+XHrxpaPPmLTg1IhvIyPaC4f8vcQYGPJn267dvDD9+/GBg+P//WUJCvDRFDlrOqEJsIOBV5/b2FFg+IT4OZ0AQFULLGFXxWsTJwsTw599/ht//8Aeo+9uTtHdQrJYog6eiINii5TdeM2y++x6n42nqIBUBDoZGazmMVPP3/3+G8oMPGZ59/YXhMJo6yFCMm6HUFHvarD7ykOH+x5/0c1C4ugjD2x+/GfY8/Ah2FMhxIHDg8UeGWZdeMmgKczK8+fab4fX3PyiOolkIgRwkw8sGtmzDnXcMH378Yfj17z8DBzMjg64oxHGXX38dGAeBLH/57TfDrXffGXjYmOEhMrId5KkowKAlzAUPDWwhdO7lF4YPP//SJw2BbJHiYWOI1BABW4jsIFDReOr5F4avv1EdA1JHs0SN7G1QaAlzsoLT0JsfvxnufcDM7jD1dHEQKZUc1Ry0kVGB4R+4niKq8sfpRrv3F6hTl/3584fh46dPpAQGbrX//z9ISIhXxKWAojb1pEmT2F+8ePED3XBGRkbL1tbWE+T4gCIH/f//n7G6uvofusVtbW1M5MYvWQ4CNW0ZGBiYfv36BcpSIDY6qLl9+3bH6tWrMfM+gWAjyUELFi4iK1XjayFiRDcp8Txp0qQgUtTD1Obl5a0jVh9JIUSsoZSoG3UQodAbDaHRECIUAoTkAUfhJTT9DC1uAAAAAElFTkSuQmCC", "largeIcon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAFwklEQVR4Xu2aW2wUVRjH/2f20p12d+hSGloqUDQVxEsTIIGgJr6oGH0w0UQTpQs1oE/GNBhDednESLQJD2oiQQ0u+NQmagI1XhIhGk2QhKgBE0hrKSCXtvSyzF5mZmfmmDPrYmnZ3dmZXeq25zxtst/5vvP95n/O+c7MIeCtIAHC+RQmwAEVUQgHxAG5W0S4griCuILcEeAKcsePr0FcQVxB7ghwBbnjx9cgrqA5UlBfX59fFMVuQFjjbgiV6Z1IyNA0DQD9JhKJHHIaxfEUO3Kk/xWAfkQI8TsNPrOfp/FLGGPPAhBcuUyl01AUBZRS5ucqKNmxbdvWr504dQQoGo0K69ZteJMQvOskaL4+3qYY9JGXAOpz5NY0TTA4qqre0p+Cvr49EvnQiVNHgPr6+jyiKO4GyNssaAI+jCHgJH5Z+yiqBl3PWD7DGRmimQU154AuIIRfSFNZk3XrrF0eRJM2zgHlAzmvALF5HvAKeP7eBgxMpvHbaAqqYboS0bwBJBDg4WUSnmitxz312XXs1EgCP1yI4/expGNI8wLQhqVB3Ncg4qlV4VkgFMPE98NT+PWqjPPxW3clO9SqGhCbUi+vbcTmZSEsqvHmzZdVMaOpDI7+NYFjF+N2uNy0qVpAq6QavPPoypKSzRl3fjsAxbCKv6KtKgEx5bywZomlnCViacXgcFzFH2NJ9J67XhQOM6g6QB5CUF/jwbii46HGWjzSImFjcwg+tkoXaLJm4OS1BI4OTmA0nQEhQPYEUbhVHaBato2vbsDQlIKfL8sI+jxYIfmxa0OLtcXfrv0tq/jk9AguyRoU3URbOICMQXFRVmEWgVR1gOp8HrzWvtR6+jql6D17HSOpjKWgx1fWW4v29NZz8jL+HE8hY1IsDnjwYGMdBEIwmtRwdkKBUURGVQtoOoQTV2UMTCrWTrU6LFoKYwr57MwoxtIZhPweNNX5sDxUc7PbyEICxLLOGCaOX7qB4Rsq2HrDmugVEA540VYfgGfGGrXgADEguklxLZlB/9Ck9fuBJaKlHjalZrYFCSgH4eCZUesMtqk5lHeL4oA4oPz1C1dQ+9KC1d2CBsTqnSdb67F6sZgXkh1Ag5Npq3AsVkxXXR2Uo9LeWIvNyyTU+mZXz/kAsZqQFYynx5KI/1sKzLujxvSE2Ob99N1htAT9CPo9N/+6HaC0boLtXEMlvhOqWgXlaLD6r1UKWDVPWzg77WYCOh9XMKUamFT0YoKZ9X/VA8plxA6xK6QaPLZcQu+5casOur+hFkNxxQJT7FCaj9y8AVSyNGx24IDm2/sgmw++bGb/KwUp8CCO7CsJwzCQSqdyFwfKlnCpjoJGGn4z+xn6jn96ZpcX1q9fvwsg780c+PjERKm5VNz+jgNiGfX3979IKT4GYB29mXKm4qV9mqk4mWyAQdPAq52dHcecxHN0u4MFOnDggK+5uWWHIGCVaQLJZBKqdWHJXqMwhcQNeYuu62vt9PD4vOek0KKjdmyn21BCf9re0VFyv5wPx4BKHeht7El3d3cMQIdNX1v27t37nU3bspnNJSDs2bMnRimN2MnmypUrYiwWU+zYltNmzgBFo9FaTdMOA3jOTkKqqjbu27fP3ldDOw5t2swJIEopm15vEUJ2A5BsjvVTXde7enp6ZJv2ZTGrOKCdO3f6JEnye73eZkEQNlFKNwqCsMg0zWcIIbOvdRRO6ysAwwBOCIJwSlGUa8FgMB2NRt1dJioQs2KAYoc+/xGE3gUK9rGYmCb1U0qDpmnWAfjvHUfpz1kXBCEhCEKSEGQAwiJQQkksEtlq3ZksZ6sgoMPnAbSWc7CFfBGQ9yORrW+UO17FAB08GOslAu7YzU5q4ovOzm0fVA2g/fv3txiGkf92VJkz0TRN7urqKvs5p2IKKnP+c+aOAyqCngPigNzNTq4griCuIHcEuILc8eNrEFcQV5A7AlxB7vjxNYgryJ2C/gHypJV2JaAr8gAAAABJRU5ErkJggg==", "label": "Stop Azure VM", "short_name": "stop_azure_vm", "active_response": {"technology": [{"vendor": "Microsoft", "product": "Azure", "version": ["1.0"]}], "supports_adhoc": true, "category": ["Device Control"], "task": ["update"], "subject": ["device"], "sourcetype": "azure:vm:stop"}, "parameters": [{"format_type": "text", "required": false, "name": "account_name", "label": "Account Name", "default_value": "", "help_string": "If no value is given, the first configured account in the add-on account will be used.", "type": "", "value": ""}, {"format_type": "text", "required": true, "name": "resource_group", "label": "Resource Group", "default_value": "", "help_string": "", "type": "", "value": "test"}, {"format_type": "text", "required": true, "name": "vm_name", "label": "VM Name", "default_value": "", "help_string": "", "type": "", "value": "test"}, {"format_type": "text", "required": true, "name": "subscription_id", "label": "Subscription ID", "default_value": "", "help_string": "", "type": "", "value": "eed64a96-cf9c-4de0-9688-ce7bddb0011b"}, {"format_type": "text", "required": true, "name": "tenant_id", "label": "Tenant ID", "default_value": "", "help_string": "", "type": "", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}], "code": "# encoding = utf-8\n\nimport ta_ms_aad_declare\nimport splunklib.client as client\nimport six\nimport sys\nimport json\nimport requests\nimport ta_azure_utils.utils as azutil\nimport ta_azure_utils.auth as azauth\n\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    [sample_code_macro:start]\n\n    # The following example sends rest requests to some endpoint\n    # response is a response object in python requests library\n    response = helper.send_http_request(\"http://www.splunk.com\", \"GET\", parameters=None,\n                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets the alert action parameters and prints them to the log\n    account_name = helper.get_param(\"account_name\")\n    helper.log_info(\"account_name={}\".format(account_name))\n\n    resource_group = helper.get_param(\"resource_group\")\n    helper.log_info(\"resource_group={}\".format(resource_group))\n\n    vm_name = helper.get_param(\"vm_name\")\n    helper.log_info(\"vm_name={}\".format(vm_name))\n\n    subscription_id = helper.get_param(\"subscription_id\")\n    helper.log_info(\"subscription_id={}\".format(subscription_id))\n\n    tenant_id = helper.get_param(\"tenant_id\")\n    helper.log_info(\"tenant_id={}\".format(tenant_id))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"azure:vm:stop\")\n    helper.addevent(\"world\", sourcetype=\"azure:vm:stop\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"_Splunk_ alert action stop_azure_vm started.\")\n    account_name = helper.get_param(\"account_name\")\n    resource_group = helper.get_param(\"resource_group\")\n    vm_name = helper.get_param(\"vm_name\")\n    tenant_id = helper.get_param(\"tenant_id\")\n    subscription_id = helper.get_param(\"subscription_id\")\n\n    try:\n        service = client.connect(token=helper.session_key)\n    except Exception as e:\n        helper.log_error(\"_Splunk_ error connecting to Splunk client: %s\" % str(e))\n        sys.exit(1)\n    try:\n        conf = service.confs[\"ta_ms_aad_account\"]\n    except Exception as e:\n        helper.log_error(\"_Splunk_ error getting ta_ms_aad_account: %s\" % str(e))\n        sys.exit(1)\n\n    if account_name not in [\"\", None]:\n        helper.log_debug(\"_Splunk_ getting client ID and client secret from account name : {}\".format(account_name))\n        client_id, client_secret = azutil.get_account_credentials(helper, conf, account_name)\n    else:\n        helper.log_debug(\"_Splunk_ getting client ID and client secret from first configured account.\")\n        client_id, client_secret = azutil.get_account_credentials(helper, conf, None)\n\n    try:\n        environment = \"Global\"  # TODO: implement gov environment option\n        access_token = azauth.get_mgmt_access_token(client_id, client_secret, tenant_id, environment, helper)\n    except Exception as e:\n        helper.log_error(\"_Splunk_ exception occurred while retrieving access token: %s\" % str(e))\n        sys.exit(1)\n    try:\n        azutil.stop_azure_vm(helper, access_token, subscription_id, resource_group, vm_name)\n    except Exception as e:\n        helper.log_error(\"_Splunk_ exception occurred stopping VM: %s\" % str(e))\n        sys.exit(1)\n    return 0", "uuid": "97d9746d09cc42e4b5220b8e2e5f63ef"}, {"description": "Update an Azure subscription-level alert state to 'dismiss'.", "largeIcon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAEJUlEQVR4Xu3aXWhTZxgH8P9zkhib1hpbndRpt85pJWkym3RzGxtMmPZjN7sxQ/wYY8JgG7IbQeiFg3WwG8Hh7S6G7Kqi6BDbTHEXE5wl6Zet8QNJlYrFqjWrtrVNzjtO3KrdcprmvG+0kSe3fd/nfc7v/PPQcA6BP7MKEPvMLsBAWRLCQAwkN0Q4QZwgTpCcACdIzo9nECeIEyQnwAmS81M5g6i1FZpcO2p2h0JIqakESANFIkHHsFPfCUGlRChS1ZhMHQHxACTONXi7I0QQMrWkgH6Pr3c/eqgdBfAuAKdMI3nYe00AA401nR/K1LYMFBFBx51+/TeAPpBpIO97CafrPZ2brSbJMlBbX/BLQD9IoHkxd0yhCdcFaHujN3rWys2wDnShdjcR/Wjl0Ge9Rxdid5Ov66CVcxkoX/8HtSlM0BJXLd6q+mlGq7qYxKmL71i56f/bU/AJygR0f6wP5+OfMpAhkAkoPnwIV26rGXEvZIJ6BpsxlGjnBJklKDLwFe4+/JOBzIA64l9gZCzCQOZAuzAy1sVA5kCfY2Ssm4EYaA4ZKHGuRqDyAIoWrJhe3RHnBE1jOO3L4Fv5HcqL32SgTIGyaS54KvZihfsjBjL7xlUv/wavLt3BQGZAq8q2oGJxw/SfY7d+wOjE1TlMsOxLCv6nRvZLlFvxQgBVLd2Jl90fpyUG7x/DwJ1DcipP7S54oIrFjfCvbJkB0jvYjFv8Y/WxSb03miEtAuH+OiUpKvgEZQYCwv1BBjIENnnOQaMFMzBS+jhOx95jIEPglbKtWLP8a9i0hWmQqVQCFwb3YfjBHwxkCNi1ErhdfjgdL6VBxidvIjHeByNFKj4FP4NUIMxWg4GyCD8XoPaewPuw4RcAlflOgGT920LTP2v0dJ+0Usfyk9XWVthKPYFTADZaOfhZ7SHgTPkENdTVRaesnGkZyDgsjeQNdEAgYOXwfO8RQNcoTbwd8l6ctHqWFJBx6Mmrrzu1R4uaQRSCQLXVRpTuI7oCiMNO172WjVUDEzK1pYGMw4WA1n5pfSWSWmkuzaQoVW6H7VcAJWb7BDAEgT0AeudaW9OTo4nL1TdCocPSr+IpAZpr45nWHY2tK3clXTEQlpnUuaFr+KTJ06nmKWKOzT53IKPfcCwQFEn8DEJNhv4Z6FsBbcPlQA0l0QbgyaONtJboJl3bWu+PXsrx5itZPi8S9O+VhIf8xbhrHxZixtuy53VB25p80WtKrjjHIvMKyOj9RK/vNbvmMN6cfeOfa2Gg/97UcI+/Rrc5jhDEWgAMlCn1x89WL3K6i/9ioFlmwole3xI7OfbroO95BplAtfd7y2zjC1Ob6qKJHOerkuXzbkgruSqFRRgoCyYDMZDc940TxAniBMkJcILk/HgGcYI4QXICnCA5P55BnCC5BP0NAez9WPEAMMgAAAAASUVORK5CYII=", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAABkUlEQVRYR2NkGGSAcZC5h2HUQYRiZDSEhl8I7bhiNJ+BgSGBkM+Ikf/394+ll/6lE/jU4k1D268YbmBkYPQnxjJi1fxn+OvhqXNxJy71eB2044rRf2ItIkWdh845nPZSxUHu2mfB7rn7ajbDndczCLqNbg46fDuI4duvh4PHQbuumjP8Z/gzeBy086oxQceAFNAtykYdhCs+YLls0IQQH4cG2K2fftwY+DSkJJLIoCqeA3bIrRcTGe6/XUTQUTRN1FqSlQyyQiFgRzx6t5Lh+vOugXUQyHZXLUh9ufuaBUHH0CXbE+UKJEVkR9m2q0ZOTP8Z9pJqIT71f/8xZHjrnZtJVm0P0rTzitHe/wwMTlRxFCPDXg/tcy74zKK4Tb39qtElxv8MujBL/jP8X+Opcz6UXA9Q7CBoKL7/z8AgAHHE/2UeOuejB9RB//8zMO68ZnSP4T+Dwn+Gf9meOhemDaiDYJbvuGx0+T/jv+mDxkEgh22/YpA1qBxEblTB9FElUVPqCGT9ow4iFJqjITTkQggA2MSkJal7ITUAAAAASUVORK5CYII=", "label": "Dismiss Azure Alert", "short_name": "dismiss_azure_alert", "active_response": {"technology": [{"vendor": "Microsoft", "product": "Azure", "version": ["1.0"]}], "supports_adhoc": true, "category": ["Information Conveyance"], "task": ["update"], "subject": ["alert"], "sourcetype": "azure:security:center:alert:update"}, "parameters": [{"format_type": "text", "required": false, "name": "account_name", "label": "Account Name", "default_value": "", "help_string": "If no value is given, the first configured account in the add-on account will be used.", "type": "", "value": ""}, {"format_type": "text", "required": true, "name": "alert_location", "label": "Alert Location", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": true, "name": "alert_name", "label": "Alert Name", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": true, "name": "subscription_id", "label": "Subscription ID", "default_value": "", "help_string": "", "type": "", "value": ""}, {"format_type": "text", "required": true, "name": "tenant_id", "label": "Tenant ID", "default_value": "", "help_string": "", "type": "", "value": ""}], "code": "\n# encoding = utf-8\nimport splunklib.client as client\nimport six\nimport sys\nimport json\nimport requests\nimport ta_azure_utils.utils as azutil\nimport ta_azure_utils.auth as azauth\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example sends rest requests to some endpoint\n    # response is a response object in python requests library\n    response = helper.send_http_request(\"http://www.splunk.com\", \"GET\", parameters=None,\n                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets the alert action parameters and prints them to the log\n    account_name = helper.get_param(\"account_name\")\n    helper.log_info(\"account_name={}\".format(account_name))\n\n    alert_location = helper.get_param(\"alert_location\")\n    helper.log_info(\"alert_location={}\".format(alert_location))\n\n    alert_name = helper.get_param(\"alert_name\")\n    helper.log_info(\"alert_name={}\".format(alert_name))\n\n    subscription_id = helper.get_param(\"subscription_id\")\n    helper.log_info(\"subscription_id={}\".format(subscription_id))\n\n    tenant_id = helper.get_param(\"tenant_id\")\n    helper.log_info(\"tenant_id={}\".format(tenant_id))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"azure:security:center:alert:update\")\n    helper.addevent(\"world\", sourcetype=\"azure:security:center:alert:update\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"_Splunk_ alert action dismiss_azure_alert started.\")\n    account_conf_file = \"ta_ms_aad_account\"\n    environment = \"Global\"  # TODO: implement gov environment option\n    account_name = helper.get_param(\"account_name\")\n    tenant_id = helper.get_param(\"tenant_id\")\n    alert_location = helper.get_param(\"alert_location\")\n    alert_name = helper.get_param(\"alert_name\")\n    subscription_id = helper.get_param(\"subscription_id\")\n\n    try:\n        service = client.connect(token=helper.session_key)\n    except Exception as e:\n        helper.log_error(\"_Splunk_ error connecting to Splunk client: %s\" % str(e))\n        raise e\n    try:\n        conf = service.confs[account_conf_file]\n    except Exception as e:\n        helper.log_error(\"_Splunk_ error getting account conf file: %s\" % str(e))\n        raise e\n\n    if account_name not in [\"\", None]:\n        helper.log_debug(\"_Splunk_ getting client ID and client secret from account name : {}\".format(account_name))\n        client_id, client_secret = azutil.get_account_credentials(helper, conf, account_name)\n    else:\n        helper.log_debug(\"_Splunk_ getting client ID and client secret from first configured account.\")\n        client_id, client_secret = azutil.get_account_credentials(helper, conf, None)\n\n    try:\n        access_token = azauth.get_mgmt_access_token(client_id, client_secret, tenant_id, environment, helper)\n    except Exception as e:\n        helper.log_error(\"_Splunk_ exception occurred while retrieving access token: %s\" % str(e))\n        raise e\n    try:\n        helper.log_info(\"_Splunk_ sending dismiss request for alert: %s\" % alert_name)\n        azutil.dismiss_asc_alert(helper, access_token, subscription_id, alert_location, alert_name)\n        helper.log_info(\"_Splunk_ successfully sent dismiss request for alert: %s\" % alert_name)\n    except Exception as e:\n        helper.log_error(\"_Splunk_ exception occurred dismissing alert: %s, error: %s\" % (alert_name, str(e)))\n        raise e\n    return 0", "uuid": "4461ff1e20bd4cd0abbe09a1dbbd1a38"}, {"description": "", "largeIcon": "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", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAEJ0lEQVRYR+2Wb0xbVRjGn3NvW6CyDVkGAkWrG3+KSzCRTOhkigORCZI4083hsqjM9sOWGEOybDNhkpmYJUZNMGunM7qFMUbUzWwQ4pYZZ8E5dTi0FxWINIVtEGAdY6W9bY+5l1Ap0J4G+LDEnk+95577vL/zvO97egjusUHuMR5EgVgZiTr0/3Mo22zdTQgpndq57w814t7+xZgnspwI9T7iGsq2dOwA6DZCcUow6Y9u+erq/mvDroOScAxPwBECl9cfiEOpv3YyRjwU64k9CIoHiNe/X9i1vp8FGhFQtsXaS0AeWaVWYfiuBzxHYDXkhNRu++cW6i4Pwkcp4lU8VDyHUZcIiFTLgooISGdppycq1+Kx5GXoHXOhorkTP259NOxm+5yT2NbaC9sbBfK6J4//jJG73oZuU8Er4T6MGOjj0iwUPZSIqzfHUXXmdyaQfdwNw7meANC6z3/CuMf/frexoGZJgGaK5CXfh/oirTx1Yl8bbvaNyr8VSh67jxsCSzc02+Dx0cCzGioVq+CZDumOWLeDkmNfV2Tg+oQHmvgYJKmVcpCB7mGcOnA+aMMv1BRidZ4GoijC7XbDcUeElwLp8Qo8qNEw4zEX6CztE0lxSvU3lZlznLZ33cCX714Mmk9MXY6X3yuBx+MJmhf9FGUtdghGfdiYkQDRUAU84nDiWE1LUODKvYVIWp0wb5kUn+1HcqZb+V1RkXfB55DUYeE6aqhvFA372mT9lenL8WLtUyFrVgICfIcEY+GeBQFlmi/l8oTvDAXUXHcBDtsQaluMsv47myy4P3UZXqp7et545a12TProOcGoL18QkM7yfQqgGJwP6IeTv+HKaZusu3nPRqSsWYX6nSfl54fzUlFsenxOzOdb7XAvBkhSDJWyD7Y2BgUsef0JfHv0cmBu56cVc4CklPkp3vzTpP9oQQ5NA1m35IAnwfU/G2h2gNcObwKv5IOmJaCl6LK/DuSnZTynDe4cFtC6zTrklq0JAH3YNYKz/XcWDyQpDo2OdVa19uTe8vjQWJaBBAWVDz3WGJgQsePiIKoyVqDhbydAUS3dFMJ9xzyHptM2U6SpWIOVscHpmB3kE2EMTb23EctzmPRNXUtY6ZLWMIGyLe1GBUfMXdX5smjOkQ7EKzmcLk0Pa5BUL/XPZuEZbSKcbi8KvriC8QmH2vGWwbUoh7LM1lc5Qj67Vp0PBUdkIMkdyaVwQwLaq9di+9oUDIy7UdL4K4TzDgWaDb5FAc1MmXQx8/mn/r0TVDyaStLmdN90sB6nB6ZL1xGj4OCWbpIUtwWTfgWr7pgpmxaQnCKEqLqNeovObN0AQqTi/K+NgiN1CEa9PvPwhTSOiyvnKL1hM60/w4KJqIYiEZFPdFFUCbs2Mu/MLL2IHWIJLdX7KBDLyahDUYdYDrDe/wsuyYc0vd3iZAAAAABJRU5ErkJggg==", "label": "Add member to Microsoft 365 Group", "short_name": "add_member_m365_group", "active_response": {"technology": [{"vendor": "Microsoft", "product": "Microsoft 365", "version": ["1.0"]}], "supports_adhoc": true, "category": ["Permissions Control"], "task": ["update"], "subject": ["group"], "sourcetype": "m365:group:member:add"}, "parameters": [{"format_type": "text", "required": false, "name": "account_name", "label": "Account Name", "default_value": "", "help_string": "If no value is given, the first configured account in the add-on account will be used.", "type": "", "value": ""}, {"format_type": "text", "required": true, "name": "group_id", "label": "Group ID", "default_value": "", "help_string": "", "type": "", "value": "ff479729-d51a-4791-a9aa-c55ed3755e3c"}, {"format_type": "text", "required": true, "name": "member_id", "label": "Member ID", "default_value": "", "help_string": "", "type": "", "value": "6d1c5aa8-2b5c-4482-aeab-e4b29875b569"}, {"format_type": "text", "required": true, "name": "tenant_id", "label": "Tenant ID", "default_value": "", "help_string": "", "type": "", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}], "code": "# encoding = utf-8\nimport splunklib.client as client\nimport six\nimport sys\nimport json\nimport requests\nimport ta_azure_utils.utils as azutil\nimport ta_azure_utils.auth as azauth\n\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    [sample_code_macro:start]\n\n    # The following example sends rest requests to some endpoint\n    # response is a response object in python requests library\n    response = helper.send_http_request(\"http://www.splunk.com\", \"GET\", parameters=None,\n                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets the alert action parameters and prints them to the log\n    account_name = helper.get_param(\"account_name\")\n    helper.log_info(\"account_name={}\".format(account_name))\n\n    group_id = helper.get_param(\"group_id\")\n    helper.log_info(\"group_id={}\".format(group_id))\n\n    member_id = helper.get_param(\"member_id\")\n    helper.log_info(\"member_id={}\".format(member_id))\n\n    tenant_id = helper.get_param(\"tenant_id\")\n    helper.log_info(\"tenant_id={}\".format(tenant_id))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"m365:group:member:add\")\n    helper.addevent(\"world\", sourcetype=\"m365:group:member:add\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"_Splunk_ alert action add_member_m365_group started.\")\n    account_conf_file = \"ta_ms_aad_account\"\n    environment = \"Global\"  # TODO: implement gov environment option\n    account_name = helper.get_param(\"account_name\")\n    tenant_id = helper.get_param(\"tenant_id\")\n    group_id = helper.get_param(\"group_id\")\n    member_id = helper.get_param(\"member_id\")\n\n    try:\n        service = client.connect(token=helper.session_key)\n    except Exception as e:\n        helper.log_error(\"_Splunk_ error connecting to Splunk client: %s\" % str(e))\n        raise e\n    try:\n        conf = service.confs[account_conf_file]\n    except Exception as e:\n        helper.log_error(\"_Splunk_ error getting account conf file: %s\" % str(e))\n        raise e\n\n    if account_name not in [\"\", None]:\n        helper.log_debug(\"_Splunk_ getting client ID and client secret from account name : {}\".format(account_name))\n        client_id, client_secret = azutil.get_account_credentials(helper, conf, account_name)\n    else:\n        helper.log_debug(\"_Splunk_ getting client ID and client secret from first configured account.\")\n        client_id, client_secret = azutil.get_account_credentials(helper, conf, None)\n\n    try:\n        access_token = azauth.get_graph_access_token(client_id, client_secret, tenant_id, environment, helper)\n    except Exception as e:\n        helper.log_error(\"_Splunk_ exception occurred while retrieving access token: %s\" % str(e))\n        raise e\n    try:\n        helper.log_info(\"_Splunk_ sending request to add group member. group_id: %s, member_id: %s\" % (group_id, member_id))\n        azutil.add_m365_group_member(helper, access_token, group_id, member_id)\n        helper.log_info(\"_Splunk_ successfully sent request to add group member.\")\n    except Exception as e:\n        helper.log_error(\"_Splunk_ exception occurred adding group member: %s\" % str(e))\n        raise e\n    return 0", "uuid": "18125b7d2c484ae8a985990e21e656b8"}]}, "basic_builder": {"appname": "TA-MS-AAD", "friendly_name": "Microsoft Azure Add-on for Splunk", "version": "3.2.0", "author": "Splunk Works", "description": "This add-on collects Microsoft Azure including Azure AD, resource metadata, metrics, Event Hub data, consumption, billing, topology, and Security Center.", "theme": "#0072c6", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAClUlEQVRYR+2WS2gTURiFzyRpYqwktYkpSUDbJNQYlYYSsQtBUajgQsQSsESXTaUgSEXBhY+dSqtgoKAuxIWCC6PoQmw2XSUIVgk2VEcxxda2qY88aiePaR6STTSdhjvjhNLFzPb+95xvzv3n/kNhMFTCOnooCYhwGlJCpHaVEpISIiVAWq9LD1EUBadVC3eHDiZNA5bYIl59SCAQiYNlCySGqnXRQCqVArfcFpx2NkNGUVXiobkMeh99xnSM4Q0lCqiczJ2T7fA6m2sa0okcunwRJBdZXlC8gVr0avTtNUC7UYEXkwkE6SS6d+vw0mPDimA4xteDC7j4NFo/oDbzJgT7d8DYqKiIjs0waNU0oE2rJBpFUyx23ggjmyP3E6+E7nra4e3UEY1rFTD5EhxDYUz/zBI1iEAyOYV3553o2LKBKFarYLlYgn34PaILaaLGqkBNWhWO2JtgM6ihVyvgdemhkld/QUTlFQWPJxP48iOH2d8sRukUpmIMSkXur1g1kJxC/wEzrh0yYbNKLtSTd32hWMK9cBzn/FFksvna99CZw1vh6zbzFhZb+ORjEr33aeQLxYpUJaFtxkbQZ3dBpZCJ9RG0/5R/Cg9DMS7Q1aOtuLLfKEisHsVjX5dw0DfBBfL3OXDcrq2HhyCNeWYZpsvjXKBnXgeObV97oO/pPFouveEC3XRbMdhlEPR29Sgen89gz3CYC9Rp1eLtgKMeHoI0Lox+w1BghgtUnpAjJ2wYcOkFCYopDscy2DcSAZP+exdVXYwKpRy3eyxrAvV6lkHPg0+Yi1fPN87oKP/juCwaeJw6GDRKKEWOjH8TLN/Qi7kCAnQKzyd+gV1l+hOHq5gj+Z+9EhApNSkhKSFSAqT1dddDfwAD6gPw+qtRRAAAAABJRU5ErkJggg==", "visible": true, "tab_version": "3.0.1", "tab_build_no": "2", "build_no": 31}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "azure:resource:group", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "azure_resource_group", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "label": "Subscription ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"required": true, "name": "environment", "label": "Environment", "default_value": "public", "placeholder": "", "help_string": "", "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "type": "dropdownlist", "format_type": "dropdownlist", "value": "public"}, {"name": "source_type", "label": "Resource Group Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:resource:group", "placeholder": "azure:resource:group", "type": "text", "value": "azure:resource:group"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "subscription_id", "title": "Subscription ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "source_type", "title": "Resource Group Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:resource:group", "placeholder": "azure:resource:group"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport requests\nimport ta_azure_utils.utils as azutil\nimport ta_azure_utils.auth as azauth\n\ndef validate_input(helper, definition):\n    pass\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    subscription_id = helper.get_arg(\"subscription_id\")\n    tenant_id = helper.get_arg(\"tenant_id\")\n    source_type = helper.get_arg(\"source_type\")\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        management_base_url = \"https://management.usgovcloudapi.net\"\n    else:\n        management_base_url = \"https://management.azure.com\"\n    \n    resource_group_api_version = \"2018-05-01\"\n    \n    access_token = azauth.get_mgmt_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    if(access_token):\n        \n        helper.log_debug(\"_Splunk_ Collecting resource group data.\")\n        url = management_base_url + \"/subscriptions/%s/resourcegroups?api-version=%s\" % (subscription_id, resource_group_api_version)\n        resource_groups = azutil.get_items(helper, access_token, url)\n        for resource_group in resource_groups:\n            event = helper.new_event(\n                data=json.dumps(resource_group),\n                source=helper.get_input_type(), \n                index=helper.get_output_index(),\n                sourcetype=source_type)\n            ew.write_event(event)\n\n    else:\n        raise RuntimeError(\"Unable to obtain access token. Please check the Client ID, Client Secret, and Tenant ID\")", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"name": "environment", "value": "public"}, {"name": "source_type", "value": "azure:resource:group"}], "description": "azure_resource_group", "sample_count": 0, "uuid": "78da9f0490a24434aed65e8d88c3a491", "title": "Azure Resource Groups"}, {"index": "default", "sourcetype": "azure:resourcegraph", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "azure_resource_graph", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_ids", "label": "Subscription IDs", "help_string": "Comma separated list of subscription IDs against which to execute the query.", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"required": true, "name": "environment", "label": "Environment", "default_value": "public", "placeholder": "", "help_string": "", "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "type": "dropdownlist", "format_type": "dropdownlist", "value": "public"}, {"name": "resource_graph_query", "label": "Resource Graph Query", "help_string": "The resources query.  Example: project id, name, type, location, tags | limit 10", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "project id, name, type, location, tags | limit 100"}, {"name": "source_type", "label": "Resource Graph Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:resourcegraph", "placeholder": "azure:resourcegraph", "type": "text", "value": "azure:resourcegraph"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "subscription_ids", "title": "Subscription IDs", "description": "Comma separated list of subscription IDs against which to execute the query.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "resource_graph_query", "title": "Resource Graph Query", "description": "The resources query.  Example: project id, name, type, location, tags | limit 10", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "source_type", "title": "Resource Graph Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:resourcegraph", "placeholder": "azure:resourcegraph"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport ta_azure_utils.auth as azauth\nimport ta_azure_utils.resource_graph as az_resource_graph\n\n\ndef validate_input(helper, definition):\n    pass\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    tenant_id = helper.get_arg(\"tenant_id\")\n    subscription_id = helper.get_arg(\"subscription_ids\")\n    query = helper.get_arg(\"resource_graph_query\")\n    source_type = helper.get_arg(\"source_type\")\n    environment = helper.get_arg(\"environment\")\n    \n    access_token = azauth.get_mgmt_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    resources = az_resource_graph.get_json_resources_by_query(helper, access_token, query, subscription_id.split(\",\"), environment, resources=[])\n    \n    for resource in resources:\n        event = helper.new_event(\n            data=json.dumps(resource),\n            index=helper.get_output_index(),\n            sourcetype=source_type)\n        ew.write_event(event) \n        ", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_ids", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"name": "environment", "value": "public"}, {"name": "resource_graph_query", "value": "project id, name, type, location, tags | limit 100"}, {"name": "source_type", "value": "azure:resourcegraph"}], "description": "Submits a query on resources within specified subscriptions.", "sample_count": 0, "uuid": "2ab8ed76d3d3441fbe059c453ee1662c", "title": "Azure Resource Graph"}, {"index": "default", "sourcetype": "azure:topology:man", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "azure_topology_man", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "label": "Subscription ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"required": true, "name": "environment", "label": "Environment", "default_value": "public", "placeholder": "", "help_string": "", "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "type": "dropdownlist", "format_type": "dropdownlist", "value": "public"}, {"name": "source_type", "label": "Topology Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:topology", "placeholder": "azure:topoloty", "type": "text", "value": "azure:topology"}, {"name": "network_watcher_name", "label": "Network Watcher Name", "help_string": "Network Watchers provide access to topology data.", "required": true, "format_type": "text", "default_value": "", "placeholder": "NetworkWatcher_location", "type": "text", "value": "NetworkWatcher_westus"}, {"name": "network_watcher_resource_group", "label": "Network Watcher Resource Group", "help_string": "Specify the Resource Group containing the Network Watcher.", "required": true, "format_type": "text", "default_value": "", "placeholder": "NetworkWatcherRG", "type": "text", "value": "NetworkWatcherRG"}, {"name": "target_resource_group", "label": "Target Resource Group", "help_string": "Specify the Resource Group to enumerate topology. This Resource Group should be in the same region as the Network Watcher.", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "AzureMarketplaceGroup"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "subscription_id", "title": "Subscription ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "source_type", "title": "Topology Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:topology", "placeholder": "azure:topoloty"}, {"type": "customized_var", "name": "network_watcher_name", "title": "Network Watcher Name", "description": "Network Watchers provide access to topology data.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "NetworkWatcher_location"}, {"type": "customized_var", "name": "network_watcher_resource_group", "title": "Network Watcher Resource Group", "description": "Specify the Resource Group containing the Network Watcher.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "NetworkWatcherRG"}, {"type": "customized_var", "name": "target_resource_group", "title": "Target Resource Group", "description": "Specify the Resource Group to enumerate topology. This Resource Group should be in the same region as the Network Watcher.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport requests\nfrom ta_azure_utils.auth import get_mgmt_access_token\nfrom ta_azure_utils.topology import get_topology_by_rg\n\ndef validate_input(helper, definition):\n    pass\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    subscription_id = helper.get_arg(\"subscription_id\")\n    source_type = helper.get_arg(\"source_type\")\n    tenant_id = helper.get_arg(\"tenant_id\")\n    network_watcher_name = helper.get_arg(\"network_watcher_name\")\n    network_watcher_resource_group = helper.get_arg(\"network_watcher_resource_group\")\n    target_resource_group = helper.get_arg(\"target_resource_group\")\n    environment = helper.get_arg(\"environment\")\n        \n    api_version = \"2018-11-01\"\n    \n    access_token = get_mgmt_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    topology = get_topology_by_rg(helper, access_token, subscription_id, environment, api_version, network_watcher_resource_group, network_watcher_name, target_resource_group)\n                    \n    if len(topology) > 0:\n        try:\n            # Try the Python 2 way\n            for key, resource in topology.iteritems():\n                \n                e = helper.new_event(\n                    source=helper.get_input_type(), \n                    index=helper.get_output_index(), \n                    sourcetype=source_type, \n                    data=json.dumps(resource))\n                ew.write_event(e)\n        except Exception as e:\n            try:\n                # Try the Python 3 way\n                for key, resource in topology.items():\n                    e = helper.new_event(\n                        source=helper.get_input_type(), \n                        index=helper.get_output_index(), \n                        sourcetype=source_type, \n                        data=json.dumps(resource))\n                    ew.write_event(e)\n            except Exception as e:\n                raise e\n                ", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"name": "environment", "value": "public"}, {"name": "source_type", "value": "azure:topology"}, {"name": "network_watcher_name", "value": "NetworkWatcher_westus"}, {"name": "network_watcher_resource_group", "value": "NetworkWatcherRG"}, {"name": "target_resource_group", "value": "AzureMarketplaceGroup"}], "description": "Gets topology for a specific Resource Group using the specified Network Watcher.", "sample_count": 0, "uuid": "d86ea3fceed8406f8baa9be822f59953", "title": "Azure Topology (manual)"}, {"index": "default", "sourcetype": "azure:topology:automatic", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "azure_topology_automatic", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "label": "Subscription ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"name": "environment", "label": "Environment", "help_string": "", "required": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": "", "type": "dropdownlist", "value": "public"}, {"name": "source_type", "label": "Topology Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:topology", "placeholder": "azure:topoloty", "type": "text", "value": "azure:topology"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "subscription_id", "title": "Subscription ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "source_type", "title": "Topology Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:topology", "placeholder": "azure:topoloty"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport requests\nimport re\nfrom ta_azure_utils.auth import get_mgmt_access_token\nfrom ta_azure_utils.utils import get_items\nfrom ta_azure_utils.resource_groups import get_resource_groups_by_location\nfrom ta_azure_utils.topology import get_topology_by_rg\n\ndef validate_input(helper, definition):\n    pass\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    subscription_id = helper.get_arg(\"subscription_id\")\n    source_type = helper.get_arg(\"source_type\")\n    tenant_id = helper.get_arg(\"tenant_id\")\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        management_base_url = \"https://management.usgovcloudapi.net\"\n    else:\n        management_base_url = \"https://management.azure.com\"\n        \n    api_version = \"2018-11-01\"\n    \n    access_token = get_mgmt_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    network_watcher_url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Network/networkWatchers?api-version=%s\" % (subscription_id, api_version)\n    network_watchers = get_items(helper, access_token, network_watcher_url)\n    \n    resource_group_locations = get_resource_groups_by_location(helper, access_token, subscription_id, environment)\n    \n    # The resource groups are grouped by location, so loop through locations\n    for location in resource_group_locations:\n        \n        # Get the network watcher(s) for this location\n        for watcher in network_watchers:\n            if watcher[\"location\"] == location:\n                \n                # Get the resource group and name for this network watcher\n                resourceGroupName = re.search('\\/resourceGroups\\/(.+?)\\/providers', watcher[\"id\"]).group(1)\n                networkWatcherName = watcher[\"name\"]\n                \n                # Get resource groups in the same location as this watcher\n                for targetResourceGroupName in resource_group_locations[location]:\n                    \n                    # Get the topology for this resource group\n                    topology = get_topology_by_rg(helper, access_token, subscription_id, environment, api_version, resourceGroupName, networkWatcherName, targetResourceGroupName)\n                    \n                    if len(topology) > 0:\n                        try:\n                            # Try the Python 2 way\n                            for key, resource in topology.iteritems():\n                                \n                                e = helper.new_event(\n                                    source=helper.get_input_type(), \n                                    index=helper.get_output_index(), \n                                    sourcetype=source_type, \n                                    data=json.dumps(resource))\n                                ew.write_event(e)\n                        except Exception as e:\n                            try:\n                                # Try the Python 3 way\n                                for key, resource in topology.items():\n                                \n                                    e = helper.new_event(\n                                        source=helper.get_input_type(), \n                                        index=helper.get_output_index(), \n                                        sourcetype=source_type, \n                                        data=json.dumps(resource))\n                                    ew.write_event(e)\n                            except Exception as e:\n                                raise e\n                                ", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"name": "environment", "value": "public"}, {"name": "source_type", "value": "azure:topology"}], "description": "Automatically gets all topologies by enumerating all Network Watchers in all Resource Groups in all locations.", "sample_count": 0, "uuid": "3f22cafa112e4b65bc1a4c8bf213965f", "title": "Azure Topology (auto)"}, {"index": "default", "sourcetype": "azure:reservation:recommendation", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "azure_reservation_recommendation", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "label": "Subscription ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"name": "environment", "label": "Environment", "help_string": "", "required": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": "", "type": "dropdownlist", "value": "public"}, {"name": "recommendation_sourcetype", "label": "Recommendation Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:reservation:recommendation", "placeholder": "azure:reservation:recommendation", "type": "text", "value": "azure:reservation:recommendation"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "subscription_id", "title": "Subscription ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "recommendation_sourcetype", "title": "Recommendation Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:reservation:recommendation", "placeholder": "azure:reservation:recommendation"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport requests\nimport ta_azure_utils.utils as azutil\nimport ta_azure_utils.auth as azauth\n\ndef validate_input(helper, definition):\n    pass\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    tenant_id = helper.get_arg(\"tenant_id\")\n    subscription_id = helper.get_arg(\"subscription_id\")\n    source_type = helper.get_arg(\"recommendation_sourcetype\")\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        management_base_url = \"https://management.usgovcloudapi.net\"\n    else:\n        management_base_url = \"https://management.azure.com\"\n    \n    access_token = azauth.get_mgmt_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    if(access_token):\n        url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Consumption/reservationRecommendations?api-version=2019-05-01\" % subscription_id\n        \n        try:\n            recommendations = azutil.get_items(helper, access_token, url)\n        \n            for recommendation in recommendations:\n                event = helper.new_event(\n                    data=json.dumps(recommendation),\n                    source=helper.get_input_type(), \n                    index=helper.get_output_index(),\n                    sourcetype=source_type)\n                ew.write_event(event)\n        except Exception as e:\n            raise e\n    else:\n        raise RuntimeError(\"Unable to obtain access token. Please check the Client ID, Client Secret, and Tenant ID\")", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"name": "environment", "value": "public"}, {"name": "recommendation_sourcetype", "value": "azure:reservation:recommendation"}], "description": "Gets recommendations for purchasing reserved instances.", "sample_count": 0, "uuid": "b56ee407f9a341c9abca0a50a7353518", "title": "Azure Reservation Recommendation"}, {"index": "default", "sourcetype": "azure:comp", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "azure_comp", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "label": "Subscription ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"required": true, "name": "environment", "label": "Environment", "default_value": "public", "placeholder": "", "help_string": "", "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "type": "dropdownlist", "format_type": "dropdownlist", "value": "public"}, {"name": "collect_virtual_machine_data", "label": "Collect Virtual Machine Data", "help_string": "", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": true}, {"name": "virtual_machine_sourcetype", "label": "Virtual Machine Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:compute:vm", "placeholder": "azure:compute:vm", "type": "text", "value": "azure:compute:vm"}, {"name": "collect_managed_disk_data", "label": "Collect Managed Disk Data", "help_string": "", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": true}, {"name": "managed_disk_sourcetype", "label": "Managed Disk Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:compute:disk", "placeholder": "azure:compute:disk", "type": "text", "value": "azure:compute:disk"}, {"name": "collect_image_data", "label": "Collect Image Data", "help_string": "", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": true}, {"name": "image_sourcetype", "label": "Image Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:compute:image", "placeholder": "azure:compute:image", "type": "text", "value": "azure:compute:image"}, {"name": "collect_snapshot_data", "label": "Collect Snapshot Data", "help_string": "", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": true}, {"name": "snapshot_sourcetype", "label": "Snapshot Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:compute:snapshot", "placeholder": "azure:compute:snapshot", "type": "text", "value": "azure:compute:snapshot"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "subscription_id", "title": "Subscription ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "collect_virtual_machine_data", "title": "Collect Virtual Machine Data", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "virtual_machine_sourcetype", "title": "Virtual Machine Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:compute:vm", "placeholder": "azure:compute:vm"}, {"type": "customized_var", "name": "collect_managed_disk_data", "title": "Collect Managed Disk Data", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "managed_disk_sourcetype", "title": "Managed Disk Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:compute:disk", "placeholder": "azure:compute:disk"}, {"type": "customized_var", "name": "collect_image_data", "title": "Collect Image Data", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "image_sourcetype", "title": "Image Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:compute:image", "placeholder": "azure:compute:image"}, {"type": "customized_var", "name": "collect_snapshot_data", "title": "Collect Snapshot Data", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "snapshot_sourcetype", "title": "Snapshot Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:compute:snapshot", "placeholder": "azure:compute:snapshot"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport re\nimport ta_azure_utils.utils as azutil\nimport ta_azure_utils.auth as azauth\n\ndef validate_input(helper, definition):\n    pass\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    subscription_id = helper.get_arg(\"subscription_id\")\n    tenant_id = helper.get_arg(\"tenant_id\")\n    \n    disk_api_version = \"2018-06-01\"\n    disk_sourcetype = helper.get_arg(\"managed_disk_sourcetype\")\n    collect_disks = helper.get_arg(\"collect_managed_disk_data\")\n    \n    image_api_version = \"2018-06-01\"\n    image_sourcetype = helper.get_arg(\"image_sourcetype\")\n    collect_images = helper.get_arg(\"collect_image_data\")\n    \n    snapshot_api_version = \"2018-06-01\"\n    snapshot_sourcetype = helper.get_arg(\"snapshot_sourcetype\")\n    collect_snapshots = helper.get_arg(\"collect_snapshot_data\")\n    \n    vm_api_version = \"2018-06-01\"\n    vm_instance_view_api_version = \"2019-03-01\"\n    vm_sourcetype = helper.get_arg(\"virtual_machine_sourcetype\")\n    vm_instance_view_sourcetype = vm_sourcetype + \":instanceView\"\n    collect_vms = helper.get_arg(\"collect_virtual_machine_data\")\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        management_base_url = \"https://management.usgovcloudapi.net\"\n    else:\n        management_base_url = \"https://management.azure.com\"\n    \n    access_token = azauth.get_mgmt_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    if(access_token):\n        \n        if(collect_disks):\n            helper.log_debug(\"_Splunk_ Collecting managed disk data. sourcetype='%s'\" % disk_sourcetype)\n            url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Compute/disks?api-version=%s\" % (subscription_id, disk_api_version)\n            disks = azutil.get_items(helper, access_token, url)\n            for disk in disks:\n                event = helper.new_event(\n                    data=json.dumps(disk),\n                    source=helper.get_input_type(), \n                    index=helper.get_output_index(),\n                    sourcetype=disk_sourcetype)\n                ew.write_event(event)\n                \n        if(collect_images):\n            helper.log_debug(\"_Splunk_ Collecting image data. sourcetype='%s'\" % image_sourcetype)\n            url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Compute/images?api-version=%s\" % (subscription_id, image_api_version)\n            images = azutil.get_items(helper, access_token, url)\n            for image in images:\n                event = helper.new_event(\n                    data=json.dumps(image),\n                    source=helper.get_input_type(), \n                    index=helper.get_output_index(),\n                    sourcetype=image_sourcetype)\n                ew.write_event(event)\n                \n        if(collect_snapshots):\n            helper.log_debug(\"_Splunk_ Collecting snapshot data. sourcetype='%s'\" % snapshot_sourcetype)\n            url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Compute/snapshots?api-version=%s\" % (subscription_id, snapshot_api_version)\n            snapshots = azutil.get_items(helper, access_token, url)\n            for snapshot in snapshots:\n                event = helper.new_event(\n                    data=json.dumps(snapshot),\n                    source=helper.get_input_type(), \n                    index=helper.get_output_index(),\n                    sourcetype=snapshot_sourcetype)\n                ew.write_event(event)\n                \n        if(collect_vms):\n            helper.log_debug(\"_Splunk_ Collecting virtual machine data. sourcetype='%s'\" % vm_sourcetype)\n            url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Compute/virtualMachines?api-version=%s\" % (subscription_id, disk_api_version)\n            vms = azutil.get_items(helper, access_token, url)\n            for vm in vms:\n                try:\n                    # Get the VM status (i.e. Instance View)\n                    vm_id = vm[\"id\"]\n                    pattern = \"\\/subscriptions\\/(?P<subscription_id>[^\\/]+)\\/resourceGroups\\/(?P<vm_resource_group>[^\\/]+)\\/providers\\/Microsoft\\.Compute\\/virtualMachines\\/(?P<vm_name>[^\\/]+)$\"\n                    match = re.search(pattern, vm_id)\n                    vm_resource_group = match.group(\"vm_resource_group\")\n                    vm_name = match.group(\"vm_name\")\n                    instance_view_url = \"https://management.azure.com/subscriptions/%s/resourceGroups/%s/providers/Microsoft.Compute/virtualMachines/%s/instanceView?api-version=%s\" % (subscription_id, vm_resource_group, vm_name, vm_instance_view_api_version)\n                    vm_instance_view = azutil.get_item(helper, access_token, instance_view_url)\n                    \n                    event = helper.new_event(\n                        host=vm_name,\n                        data=json.dumps(vm_instance_view),\n                        source=helper.get_input_type(), \n                        index=helper.get_output_index(),\n                        sourcetype=vm_instance_view_sourcetype)\n                    ew.write_event(event)\n                    \n                except Exception as e:\n                    helper.log_debug(\"_Splunk_ Could not regex extraction for vm. Detail %s\" % str(e))\n                    pass\n\n                event = helper.new_event(\n                    data=json.dumps(vm),\n                    source=helper.get_input_type(), \n                    index=helper.get_output_index(),\n                    sourcetype=vm_sourcetype)\n                ew.write_event(event)\n                \n    else:\n        raise RuntimeError(\"Unable to obtain access token. Please check the Client ID, Client Secret, and Tenant ID\")\n        ", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"name": "environment", "value": "public"}, {"name": "collect_virtual_machine_data", "value": true}, {"name": "virtual_machine_sourcetype", "value": "azure:compute:vm"}, {"name": "collect_managed_disk_data", "value": true}, {"name": "managed_disk_sourcetype", "value": "azure:compute:disk"}, {"name": "collect_image_data", "value": true}, {"name": "image_sourcetype", "value": "azure:compute:image"}, {"name": "collect_snapshot_data", "value": true}, {"name": "snapshot_sourcetype", "value": "azure:compute:snapshot"}], "description": "Collects compute resources including VMs, disks, images, etc.", "sample_count": 0, "uuid": "0586f4e1771e4114b5e373287c74da4d", "title": "Azure Compute"}, {"index": "default", "sourcetype": "azure:metrics", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "azure_metrics", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "label": "Subscription ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"required": true, "name": "environment", "label": "Environment", "default_value": "public", "placeholder": "", "help_string": "", "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "type": "dropdownlist", "format_type": "dropdownlist", "value": "public"}, {"name": "source_type", "label": "Metric Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:metrics", "placeholder": "azure:metrics", "type": "text", "value": "azure:metrics"}, {"name": "namespaces", "label": "Namespaces", "help_string": "Coma separated list of metric namespaces to query. Detail https://docs.microsoft.com/en-us/azure/azure-monitor/platform/metrics-supported", "required": true, "format_type": "text", "default_value": "", "placeholder": "Example: Microsoft.Compute/virtualMachines", "type": "text", "value": "Microsoft.Web/sites"}, {"name": "metric_statistics", "label": "Metric Statistics", "help_string": "", "required": true, "possible_values": [{"label": "Average", "value": "average"}, {"label": "Minimum", "value": "minimum"}, {"label": "Maximum", "value": "maximum"}, {"label": "Total", "value": "total"}, {"label": "Count", "value": "count"}], "format_type": "multi_dropdownlist", "default_value": ["average"], "placeholder": "", "type": "multi_dropdownlist", "value": ["average"]}, {"name": "preferred_time_aggregation", "label": "Preferred Time Aggregation", "help_string": "If the preferred time period is not available for a specific metric in the namespace, the next available time grain will be used.", "required": true, "possible_values": [{"label": "1 minute", "value": "PT1M"}, {"label": "5 minutes", "value": "PT5M"}, {"label": "15 minutes", "value": "PT15M"}, {"label": "30 minutes", "value": "PT30M"}, {"label": "1 hour", "value": "PT1H"}, {"label": "6 hours", "value": "PT6H"}, {"label": "12 hours", "value": "PT12H"}, {"label": "1 day", "value": "PT1D"}], "format_type": "dropdownlist", "default_value": "PT1M", "placeholder": "", "type": "dropdownlist", "value": "PT1M"}, {"name": "number_of_threads", "label": "Number of Threads", "help_string": "The number of threads used to download metric data in parallel", "required": true, "format_type": "text", "default_value": "5", "placeholder": "5", "type": "text", "value": "5"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "subscription_id", "title": "Subscription ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "source_type", "title": "Metric Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:metrics", "placeholder": "azure:metrics"}, {"type": "customized_var", "name": "namespaces", "title": "Namespaces", "description": "Coma separated list of metric namespaces to query. Detail https://docs.microsoft.com/en-us/azure/azure-monitor/platform/metrics-supported", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "Example: Microsoft.Compute/virtualMachines"}, {"type": "customized_var", "name": "metric_statistics", "title": "Metric Statistics", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"label": "Average", "value": "average"}, {"label": "Minimum", "value": "minimum"}, {"label": "Maximum", "value": "maximum"}, {"label": "Total", "value": "total"}, {"label": "Count", "value": "count"}], "format_type": "multi_dropdownlist", "default_value": ["average"], "placeholder": ""}, {"type": "customized_var", "name": "preferred_time_aggregation", "title": "Preferred Time Aggregation", "description": "If the preferred time period is not available for a specific metric in the namespace, the next available time grain will be used.", "required_on_edit": false, "required_on_create": true, "possible_values": [{"label": "1 minute", "value": "PT1M"}, {"label": "5 minutes", "value": "PT5M"}, {"label": "15 minutes", "value": "PT15M"}, {"label": "30 minutes", "value": "PT30M"}, {"label": "1 hour", "value": "PT1H"}, {"label": "6 hours", "value": "PT6H"}, {"label": "12 hours", "value": "PT12H"}, {"label": "1 day", "value": "PT1D"}], "format_type": "dropdownlist", "default_value": "PT1M", "placeholder": ""}, {"type": "customized_var", "name": "number_of_threads", "title": "Number of Threads", "description": "The number of threads used to download metric data in parallel", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "5", "placeholder": "5"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport requests\nimport json\nimport ta_azure_utils.auth as azauth\nimport ta_azure_utils.resource_graph as az_resource_graph\nimport ta_azure_utils.metrics as azmetrics\n\ndef validate_input(helper, definition):\n    number_of_threads = definition.parameters.get('number_of_threads')\n    try:\n        int(number_of_threads)\n    except ValueError:\n        raise ValueError(\"'Number of Threads' should be an integer without commas.\")\n    \n    n = int(number_of_threads)\n    if not 1 <= n <= 25:\n        raise ValueError(\"'Number of Threads' should be a positive integer between 1 and 25.\")\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    tenant_id = helper.get_arg(\"tenant_id\")\n    subscription_id = helper.get_arg(\"subscription_id\")\n    source_type = helper.get_arg(\"source_type\")\n    metric_statistics = helper.get_arg(\"metric_statistics\")\n    preferred_time_aggregation = helper.get_arg(\"preferred_time_aggregation\")\n    metric_namespaces = (\",\".join(\"'\" + namespace.lower().strip() + \"'\" for namespace in helper.get_arg(\"namespaces\").split(',')))\n    \n    check_point_key = \"metrics_last_date_%s\" % helper.get_input_stanza_names()\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        management_base_url = \"https://management.usgovcloudapi.net\"\n    else:\n        management_base_url = \"https://management.azure.com\"\n    \n    access_token = azauth.get_mgmt_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    # Get requested resources based on namespaces (type)\n    query = \"where type in (%s) | project id, type\" % metric_namespaces\n    resources = az_resource_graph.get_resources_by_query(helper, access_token, query, subscription_id.split(\",\"), environment, resources=[])\n\n    resources_to_query = []\n    for resource in resources:\n        resource_obj = {}\n        resource_obj[\"resource_id\"] = resource[0]\n        resource_obj[\"resource_type\"] = resource[1]\n        resources_to_query.append(resource_obj)\n    \n    # Finally, let's get the metrics for all these resources\n    azmetrics.index_metrics_for_resources(helper, ew, access_token, environment, preferred_time_aggregation, metric_statistics, resources_to_query)\n    \n    # Update the check point with the current date/time\n    now = datetime.datetime.utcnow()\n    serialized = {'year': now.year,\n        'month': now.month,\n        'day': now.day,\n        'hour': now.hour,\n        'minute': now.minute,\n        'second': now.second,\n        'microsecond': now.microsecond\n    }\n\n    helper.save_check_point(check_point_key, serialized)", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"name": "environment", "value": "public"}, {"name": "source_type", "value": "azure:metrics"}, {"name": "namespaces", "value": "Microsoft.Web/sites"}, {"name": "metric_statistics", "value": ["average"]}, {"name": "preferred_time_aggregation", "value": "PT1M"}, {"name": "number_of_threads", "value": "5"}], "description": "Collects metrics from Azure Monitor.", "sample_count": 0, "uuid": "2f413b31e48542aaa38cf26b344ff123", "title": "Azure Metrics"}, {"index": "default", "sourcetype": "azure:eventhub", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "azure_event_hub", "type": "customized", "parameters": [{"name": "connection_string", "label": "Connection String", "help_string": "Shared access policy connection string found in the Azure portal.", "required": true, "format_type": "password", "default_value": "", "placeholder": "", "type": "password", "value": ""}, {"name": "event_hub_name", "label": "Event Hub Name", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "insights-activity-logs"}, {"name": "consumer_group", "label": "Consumer Group", "help_string": "", "required": true, "format_type": "text", "default_value": "$Default", "placeholder": "", "type": "text", "value": "$Default"}, {"name": "source_type", "label": "Event Hub Sourcetype", "help_string": "Specify a value to use as the event sourcetype.", "required": true, "format_type": "text", "default_value": "azure:eventhub", "placeholder": "azure:eventhub", "type": "text", "value": "azure:eventhub"}, {"name": "transport_type", "label": "Transport Type", "help_string": "Advanced: The type of transport protocol that will be used for communicating with the Event Hubs service.", "required": true, "possible_values": [{"value": "Amqp", "label": "AMQP"}, {"value": "AmqpOverWebsocket", "label": "AMQP over WebSocket"}], "format_type": "dropdownlist", "default_value": "Amqp", "placeholder": "", "type": "dropdownlist", "value": "Amqp"}, {"name": "owner_level", "label": "Owner Level", "help_string": "Advanced: The priority for an exclusive consumer. A consumer with a higher owner level has higher exclusive priority. The owner level is also know as the 'epoch value' of the consumer.", "required": true, "format_type": "text", "default_value": "1", "placeholder": "1", "type": "text", "value": "1"}], "data_inputs_options": [{"type": "customized_var", "name": "connection_string", "title": "Connection String", "description": "Shared access policy connection string found in the Azure portal.", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "event_hub_name", "title": "Event Hub Name", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "consumer_group", "title": "Consumer Group", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "$Default", "placeholder": ""}, {"type": "customized_var", "name": "source_type", "title": "Event Hub Sourcetype", "description": "Specify a value to use as the event sourcetype.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:eventhub", "placeholder": "azure:eventhub"}, {"type": "customized_var", "name": "transport_type", "title": "Transport Type", "description": "Advanced: The type of transport protocol that will be used for communicating with the Event Hubs service.", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "Amqp", "label": "AMQP"}, {"value": "AmqpOverWebsocket", "label": "AMQP over WebSocket"}], "format_type": "dropdownlist", "default_value": "Amqp", "placeholder": ""}, {"type": "customized_var", "name": "owner_level", "title": "Owner Level", "description": "Advanced: The priority for an exclusive consumer. A consumer with a higher owner level has higher exclusive priority. The owner level is also know as the 'epoch value' of the consumer.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "1", "placeholder": "1"}], "code": "# encoding = utf-8\n\nimport sys\nimport asyncio\nimport json\nfrom azure.eventhub.aio import EventHubConsumerClient\nfrom azure.eventhub import TransportType\nfrom ta_azure_utils.utils import get_proxy\n\nhelper = None\new = None\n\ndef validate_input(helper, definition):\n\n    try:\n        int(definition.parameters.get('owner_level'))\n    except ValueError:\n        raise ValueError(\"'Owner Level' should be an integer.\")\n\nasync def on_event(partition_context, event):\n    \n    source_type = helper.get_arg(\"source_type\")\n    input_name = helper.get_input_stanza_names()\n    event_hub_name = helper.get_arg(\"event_hub_name\")\n    index = helper.get_output_index()\n    \n    event_body = event.body_as_str(encoding='UTF-8')\n    is_event_body_json = False\n    \n    # Try to convert the body to JSON\n    try:\n        event_body_json = json.loads(event_body)\n        event_body = event_body_json\n        is_event_body_json = True\n    except ValueError as e:\n        helper.log_debug(\"_Splunk_ Event message body is not JSON - parsing as text. %s\" % event_body)\n        \n    if(is_event_body_json):\n        if \"records\" in event_body:\n            helper.log_debug(\"_Splunk_ Found record array in event body %s\" % json.dumps(event_body))\n            \n            for record in event_body[\"records\"]:\n                e = helper.new_event(\n                    data = json.dumps(record),\n                    index = index,\n                    sourcetype = source_type,\n                    done = True,\n                    unbroken = True)\n                ew.write_event(e)\n                #sys.stdout.flush()\n        else:\n            e = helper.new_event(\n                data = json.dumps(event_body),\n                index = index,\n                sourcetype = source_type,\n                done = True,\n                unbroken = True)\n            ew.write_event(e)\n            #sys.stdout.flush()\n            \n    else:\n        e = helper.new_event(\n                data = str(event_body),\n                index = index,\n                sourcetype = source_type,\n                done = True,\n                unbroken = True)\n        ew.write_event(e)\n        #sys.stdout.flush()\n\n    # Update memory checkpoint \n    await partition_context.update_checkpoint(event)\n\n    # Update Splunk checkpoint for this partition\n    check_point_key = \"event_hub_sequence_number_%s_%s_%s\" % (input_name, event_hub_name, partition_context.partition_id)\n    helper.save_check_point(check_point_key, partition_context.last_enqueued_event_properties[\"sequence_number\"])\n\nasync def on_error(partition_context, error):\n    if partition_context:\n        helper.log_error(\"_Splunk_ An exception: {} occurred during receiving from Partition: {}.\".format(\n            partition_context.partition_id,\n            error\n        ))\n    else:\n        helper.log_error(\"_Splunk_ An exception: {} occurred during the load balance process.\".format(error))\n\nasync def on_partition_initialize(partition_context):\n    helper.log_debug(\"_Splunk_ Partition: {} has been initialized.\".format(partition_context.partition_id))\n\nasync def on_partition_close(partition_context, reason):\n    helper.log_debug(\"_Splunk_ Partition: {} has been closed, reason for closing: {}.\".format(\n        partition_context.partition_id,\n        reason\n    ))\n\nasync def get_starting_positions(partition_ids):\n    starting_positions = {}\n    input_name = helper.get_input_stanza_names()\n    event_hub_name = helper.get_arg(\"event_hub_name\")\n\n    for partition_id in partition_ids:\n        starting_positions[partition_id] = -1\n        check_point_key = \"event_hub_sequence_number_%s_%s_%s\" % (input_name, event_hub_name, partition_id)\n        sequence_number = helper.get_check_point(check_point_key)\n        if sequence_number:\n            starting_positions[partition_id] = sequence_number\n        else:\n            starting_positions[partition_id] = -1\n\n    return starting_positions\n\nasync def collect_event_hub_events(_helper, _ew):\n    global helper, ew\n    helper = _helper\n    ew = _ew\n    transport_type = TransportType.Amqp if helper.get_arg(\"transport_type\") == \"Amqp\" else TransportType.AmqpOverWebsocket\n    client = EventHubConsumerClient.from_connection_string(\n        conn_str = helper.get_arg(\"connection_string\"),\n        consumer_group = helper.get_arg(\"consumer_group\"),\n        eventhub_name = helper.get_arg(\"event_hub_name\"),\n        http_proxy = get_proxy(helper, \"event hub\"),\n        retry_total = 3,\n        idle_timeout = 10,\n        transport_type = transport_type)\n\n    partition_ids = await client.get_partition_ids()\n    try:\n        starting_positions = await get_starting_positions(partition_ids)\n    except:\n        starting_positions = -1\n\n    async with client:\n        await client.receive(\n            on_event = on_event,\n            on_error = on_error,\n            on_partition_close = on_partition_close,\n            on_partition_initialize = on_partition_initialize,\n            starting_position = starting_positions,\n            track_last_enqueued_event_properties = True,\n            owner_level = int(helper.get_arg(\"owner_level\")))\n\ndef collect_events(helper, ew):\n    loop = asyncio.get_event_loop()\n    try:\n        loop.run_until_complete(collect_event_hub_events(helper, ew))\n    except Exception as e:\n        helper.log_error(\"_Splunk_ error collecting event hub data: %s\" % str(e))\n    finally:\n        loop.close()", "customized_options": [{"name": "event_hub_name", "value": "insights-activity-logs"}, {"name": "consumer_group", "value": "$Default"}, {"name": "source_type", "value": "azure:eventhub"}, {"name": "transport_type", "value": "Amqp"}, {"name": "owner_level", "value": "1"}], "description": "Consumes events from an Azure Event Hub.", "sample_count": "367", "uuid": "6ba2aa1f39ab4dbb849fa76f6a79ca9d", "title": "Azure Event Hub (deprecated)"}, {"index": "default", "sourcetype": "ms:aad:device", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "MS_AAD_device", "title": "Microsoft Azure Active Directory Devices", "description": "Retrieves a list of device objects from Azure Active Directory", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "a.k.a. Directory ID", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}, {"name": "environment", "label": "Environment", "help_string": "", "required": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": "", "type": "dropdownlist", "value": "public"}, {"name": "device_sourcetype", "label": "Device Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:aad:device", "placeholder": "azure:aad:device", "type": "text", "value": "azure:aad:device"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "a.k.a. Directory ID", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "device_sourcetype", "title": "Device Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:aad:device", "placeholder": "azure:aad:device"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport requests\nimport json\nimport dateutil.parser\nimport ta_azure_utils.auth as azauth\nimport ta_azure_utils.utils as azutils\n\ndef validate_input(helper, definition):\n   pass\n\ndef collect_events(helper, ew):\n\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    tenant_id = helper.get_arg(\"tenant_id\")\n    event_source = \"tenant_id:%s\" % tenant_id\n    source_type = helper.get_arg(\"device_sourcetype\")\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        graph_base_url = \"https://graph.microsoft.us\"\n    else:\n        graph_base_url = \"https://graph.microsoft.com\"\n    \n    access_token = azauth.get_graph_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    if(access_token):\n\n        url = graph_base_url + \"/v1.0/devices/\"\n        devices_response = azutils.get_items_batch(helper, access_token, url)\n        devices = devices_response['value'] or None\n\n        while devices:\n            for device in devices:\n                event = helper.new_event(\n                        data = json.dumps(device),\n                        source = event_source, \n                        index = helper.get_output_index(),\n                        sourcetype = source_type)\n                ew.write_event(event)\n\n            sys.stdout.flush()\n            \n            devices = None\n            \n            if '@odata.nextLink' in devices_response:\n                nextLink = devices_response['@odata.nextLink']\n                helper.log_debug(\"_Splunk_ AAD devices nextLink URL (@odata.nextLink): %s\" % nextLink)\n\n                # This should never happen, but just in case...\n                if not azutils.is_https(nextLink):\n                    raise ValueError(\"nextLink scheme is not HTTPS. nextLink URL: %s\" % nextLink)\n\n                devices_response = azutils.get_items_batch(helper, access_token, nextLink)\n                devices = devices_response['value']\n\n    else:\n        helper.log_error(\"_Splunk_ Unable to obtain access token\")\n        ", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}, {"name": "environment", "value": "public"}, {"name": "device_sourcetype", "value": "azure:aad:device"}], "uuid": "0a46f1574fe946d9bc049efa862289d4", "sample_count": 0}, {"index": "default", "sourcetype": "azure:aad:risk:detection", "interval": "600", "use_external_validation": true, "streaming_mode_xml": true, "name": "aad_risk_detection", "title": "Microsoft Azure Active Directory Risk Detection", "description": "Collects Azure AD risk detection events", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "a.k.a. Directory ID", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}, {"name": "environment", "label": "Environment", "help_string": "", "required": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": "", "type": "dropdownlist", "value": "public"}, {"name": "risk_detection_sourcetype", "label": "Risk Detection Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:aad:risk:detection", "placeholder": "", "type": "text", "value": "azure:aad:risk:detection"}, {"name": "start_date", "label": "Start Date", "help_string": "The date/time to start collecting data. If no value is give, the input will start getting data 30 days in the past.", "required": false, "format_type": "text", "default_value": "", "placeholder": "YYYY-mm-ddTHH:MM:SSZ", "type": "text", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "a.k.a. Directory ID", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "risk_detection_sourcetype", "title": "Risk Detection Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:aad:risk:detection", "placeholder": ""}, {"type": "customized_var", "name": "start_date", "title": "Start Date", "description": "The date/time to start collecting data. If no value is give, the input will start getting data 30 days in the past.", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": "YYYY-mm-ddTHH:MM:SSZ"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport requests\nimport json\nimport dateutil.parser\nimport ta_azure_utils.auth as azauth\nimport ta_azure_utils.utils as azutils\n\ndef validate_input(helper, definition):\n    \n    start_date = definition.parameters.get('start_date')\n    if (start_date not in ['',None]):\n        try:\n            d = dateutil.parser.parse(start_date)\n        except Exception as e:\n            helper.log_error(\"_Splunk_ Invalid date format specified for 'Start Date': %s\" % start_date)\n            raise ValueError(\"Invalid date format specified for 'Start Date': %s\" % start_date)\n        # Make sure the date entered is less than 30 days in the past.\n        # Otherwise, the reporting API will throw an error\n        if d < (datetime.datetime.now() - datetime.timedelta(days=30)):\n            helper.log_error(\"_Splunk_ 'Start Date' cannot be more than 30 days in the past.: \" + start_date)\n            raise ValueError(\"'Start Date' cannot be more than 30 days in the past.\")\n\ndef get_start_date(helper, check_point_key):\n    \n    # Try to get a date from the check point first\n    d = helper.get_check_point(check_point_key)\n    \n    # If there was a check point date, retun it.\n    if (d not in [None,'']):\n        return d\n    else:\n        # No check point date, so look if a start date was specified as an argument\n        start_date = helper.get_arg(\"start_date\")\n        if (start_date not in [None,'']):\n            d = dateutil.parser.parse(start_date)\n            return d.strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n        else:\n            # If there was no start date specified, default to 1 day ago\n            return (datetime.datetime.now() - datetime.timedelta(days=30)).strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    tenant_id = helper.get_arg(\"tenant_id\")\n    check_point_key = \"aad_risk_detection_last_date_%s\" % helper.get_input_stanza_names()\n    event_source = \"tenant_id:%s\" % tenant_id\n    source_type = helper.get_arg(\"risk_detection_sourcetype\")\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        graph_base_url = \"https://graph.microsoft.us\"\n    else:\n        graph_base_url = \"https://graph.microsoft.com\"\n        \n    query_date = get_start_date(helper, check_point_key)\n    access_token = azauth.get_graph_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    if(access_token):\n        url = graph_base_url + \"/beta/riskDetections?$orderby=lastUpdatedDateTime&$filter=lastUpdatedDateTime+gt+%s\" % query_date\n        helper.log_debug(\"_Splunk_ Risk Detection URL used: %s\" % url)\n        max_DateTime = query_date\n\n        risk_detection_response = azutils.get_items_batch(helper, access_token, url)\n        risk_detections = risk_detection_response['value'] or None\n\n        while risk_detections:\n            for risk_detection in risk_detections:\n        \n                # Keep track of the largest signinDateTime seen during this query.\n                this_detectionDateTime = risk_detection[\"lastUpdatedDateTime\"]\n        \n                if(this_detectionDateTime > max_DateTime):\n                    max_DateTime = this_detectionDateTime\n        \n                event = helper.new_event(\n                    data=json.dumps(risk_detection),\n                    source=event_source, \n                    index=helper.get_output_index(),\n                    sourcetype=source_type)\n                ew.write_event(event)\n\n            sys.stdout.flush()\n            risk_detections = None\n            \n            # Check point the largest signinDateTime seen during the query\n            helper.save_check_point(check_point_key, max_DateTime)\n\n            if '@odata.nextLink' in risk_detection_response:\n                nextLink = risk_detection_response['@odata.nextLink']\n                helper.log_debug(\"_Splunk_ AAD risk detections nextLink URL (@odata.nextLink): %s\" % nextLink)\n\n                # This should never happen, but just in case...\n                if not azutils.is_https(nextLink):\n                    raise ValueError(\"nextLink scheme is not HTTPS. nextLink URL: %s\" % nextLink)\n\n                risk_detection_response = azutils.get_items_batch(helper, access_token, nextLink)\n                risk_detections = risk_detection_response['value'] or None\n    else:\n        helper.log_error(\"_Splunk_ Unable to obtain access token\")", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}, {"name": "environment", "value": "public"}, {"name": "risk_detection_sourcetype", "value": "azure:aad:risk:detection"}, {"name": "start_date", "value": ""}], "uuid": "28c4851ec09a4dd2ad44518cb862dfe7", "sample_count": 0}, {"index": "default", "sourcetype": "azure:virtnet", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "azure_virtual_network", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "label": "Subscription ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"required": true, "name": "environment", "label": "Environment", "default_value": "public", "placeholder": "", "help_string": "", "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "type": "dropdownlist", "format_type": "dropdownlist", "value": "public"}, {"name": "collect_virtual_network_data", "label": "Collect Virtual Network Data", "help_string": "", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": true}, {"name": "virtual_network_sourcetype", "label": "Virtual Network Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:vnet", "placeholder": "azure:vnet", "type": "text", "value": "azure:vnet"}, {"name": "collect_network_interface_data", "label": "Collect Network Interface Data", "help_string": "", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": true}, {"name": "network_interface_sourcetype", "label": "Network Interface Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:vnet:nic", "placeholder": "azure:vnet:nic", "type": "text", "value": "azure:vnet:nic"}, {"name": "collect_security_group_data", "label": "Collect Security Group Data", "help_string": "", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": true}, {"name": "security_group_sourcetype", "label": "Security Group Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:vnet:nsg", "placeholder": "azure:vnet:nsg", "type": "text", "value": "azure:vnet:nsg"}, {"name": "collect_public_ip_address_data", "label": "Collect Public IP Address Data", "help_string": "", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": true}, {"name": "public_ip_sourcetype", "label": "Public IP Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:vnet:ip:public", "placeholder": "azure:vnet:ip:public", "type": "text", "value": "azure:vnet:ip:public"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "subscription_id", "title": "Subscription ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "collect_virtual_network_data", "title": "Collect Virtual Network Data", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "virtual_network_sourcetype", "title": "Virtual Network Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:vnet", "placeholder": "azure:vnet"}, {"type": "customized_var", "name": "collect_network_interface_data", "title": "Collect Network Interface Data", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "network_interface_sourcetype", "title": "Network Interface Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:vnet:nic", "placeholder": "azure:vnet:nic"}, {"type": "customized_var", "name": "collect_security_group_data", "title": "Collect Security Group Data", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "security_group_sourcetype", "title": "Security Group Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:vnet:nsg", "placeholder": "azure:vnet:nsg"}, {"type": "customized_var", "name": "collect_public_ip_address_data", "title": "Collect Public IP Address Data", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "public_ip_sourcetype", "title": "Public IP Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:vnet:ip:public", "placeholder": "azure:vnet:ip:public"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport ta_azure_utils.utils as azutil\nimport ta_azure_utils.auth as azauth\n\ndef validate_input(helper, definition):\n    pass\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    subscription_id = helper.get_arg(\"subscription_id\")\n    tenant_id = helper.get_arg(\"tenant_id\")\n    \n    vnet_api_version = \"2018-08-01\"\n    vnet_sourcetype = helper.get_arg(\"virtual_network_sourcetype\")\n    collect_vnets = helper.get_arg(\"collect_virtual_network_data\")\n    \n    nic_api_version = \"2018-08-01\"\n    nic_sourcetype = helper.get_arg(\"network_interface_sourcetype\")\n    collect_nics = helper.get_arg(\"collect_network_interface_data\")\n    \n    nsg_api_version = \"2018-08-01\"\n    nsg_sourcetype = helper.get_arg(\"security_group_sourcetype\")\n    collect_nsgs = helper.get_arg(\"collect_security_group_data\")\n    \n    ip_api_version = \"2018-08-01\"\n    ip_sourcetype = helper.get_arg(\"public_ip_sourcetype\")\n    collect_ips = helper.get_arg(\"collect_public_ip_address_data\")\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        management_base_url = \"https://management.usgovcloudapi.net\"\n    else:\n        management_base_url = \"https://management.azure.com\"\n    \n    access_token = azauth.get_mgmt_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    if(access_token):\n        \n        if(collect_vnets):\n            helper.log_debug(\"_Splunk_ Collecting virtual network data. sourcetype='%s'\" % vnet_sourcetype)\n            url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Network/virtualNetworks?api-version=%s\" % (subscription_id, vnet_api_version)\n            vnets = azutil.get_items(helper, access_token, url)\n            for vnet in vnets:\n                event = helper.new_event(\n                    data=json.dumps(vnet),\n                    source=helper.get_input_type(), \n                    index=helper.get_output_index(),\n                    sourcetype=vnet_sourcetype)\n                ew.write_event(event)\n                \n        if(collect_nics):\n            helper.log_debug(\"_Splunk_ Collecting nic data. sourcetype='%s'\" % nic_sourcetype)\n            url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Network/networkInterfaces?api-version=%s\" % (subscription_id, nic_api_version)\n            nics = azutil.get_items(helper, access_token, url)\n            for nic in nics:\n                event = helper.new_event(\n                    data=json.dumps(nic),\n                    source=helper.get_input_type(), \n                    index=helper.get_output_index(),\n                    sourcetype=nic_sourcetype)\n                ew.write_event(event)\n                \n        if(collect_nsgs):\n            helper.log_debug(\"_Splunk_ Collecting nsg data. sourcetype='%s'\" % nsg_sourcetype)\n            url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Network/networkSecurityGroups?api-version=%s\" % (subscription_id, nsg_api_version)\n            nsgs = azutil.get_items(helper, access_token, url)\n            for nsg in nsgs:\n                event = helper.new_event(\n                    data=json.dumps(nsg),\n                    source=helper.get_input_type(), \n                    index=helper.get_output_index(),\n                    sourcetype=nsg_sourcetype)\n                ew.write_event(event)\n                \n        if(collect_ips):\n            helper.log_debug(\"_Splunk_ Collecting IP address data. sourcetype='%s'\" % ip_sourcetype)\n            url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Network/publicIPAddresses?api-version=%s\" % (subscription_id, ip_api_version)\n            ips = azutil.get_items(helper, access_token, url)\n            for ip in ips:\n                event = helper.new_event(\n                    data=json.dumps(ip),\n                    source=helper.get_input_type(), \n                    index=helper.get_output_index(),\n                    sourcetype=ip_sourcetype)\n                ew.write_event(event)\n    else:\n        raise RuntimeError(\"Unable to obtain access token. Please check the Client ID, Client Secret, and Tenant ID\")", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "8add7810-b62a-4fc0-bbbb-20165d183d7f"}, {"name": "subscription_id", "value": "133253a9-bc96-43dc-88f6-162619a12fc2"}, {"name": "environment", "value": "public"}, {"name": "collect_virtual_network_data", "value": true}, {"name": "virtual_network_sourcetype", "value": "azure:vnet"}, {"name": "collect_network_interface_data", "value": true}, {"name": "network_interface_sourcetype", "value": "azure:vnet:nic"}, {"name": "collect_security_group_data", "value": true}, {"name": "security_group_sourcetype", "value": "azure:vnet:nsg"}, {"name": "collect_public_ip_address_data", "value": true}, {"name": "public_ip_sourcetype", "value": "azure:vnet:ip:public"}], "description": "", "sample_count": 0, "uuid": "897acc95216b43b9a457df6c53da31c4", "title": "Azure Virtual Network"}, {"index": "default", "sourcetype": "azure:subscriptions", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "azure_subscription", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"required": true, "name": "environment", "label": "Environment", "default_value": "public", "placeholder": "", "help_string": "", "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "type": "dropdownlist", "format_type": "dropdownlist", "value": "public"}, {"name": "source_type", "label": "Subscription Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:subscriptions", "placeholder": "azure:subscriptions", "type": "text", "value": "azure:subscriptions"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "source_type", "title": "Subscription Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:subscriptions", "placeholder": "azure:subscriptions"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport requests\nimport ta_azure_utils.utils as azutil\nimport ta_azure_utils.auth as azauth\n\ndef validate_input(helper, definition):\n    pass\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    tenant_id = helper.get_arg(\"tenant_id\")\n    source_type = helper.get_arg(\"source_type\")\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        management_base_url = \"https://management.usgovcloudapi.net\"\n    else:\n        management_base_url = \"https://management.azure.com\"\n    \n    access_token = azauth.get_mgmt_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    if(access_token):\n        url = management_base_url + \"/subscriptions?api-version=2016-06-01\"\n\n        try:\n            subscriptions = azutil.get_items(helper, access_token, url)\n        \n            for subscription in subscriptions:\n                event = helper.new_event(\n                    data=json.dumps(subscription),\n                    source=helper.get_input_type(), \n                    index=helper.get_output_index(),\n                    sourcetype=source_type)\n                ew.write_event(event)\n        except Exception as e:\n            raise e\n    else:\n        raise RuntimeError(\"Unable to obtain access token. Please check the Client ID, Client Secret, and Tenant ID\")", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "8add7810-b62a-4fc0-bbbb-20165d183d7f"}, {"name": "environment", "value": "public"}, {"name": "source_type", "value": "azure:subscriptions"}], "description": "Collections Subscription data including subscription ID and name", "sample_count": "2", "uuid": "536db3ab166e45558e8375c29367d6ef", "title": "Azure Subscriptions"}, {"index": "default", "sourcetype": "ms:aad:user", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "MS_AAD_user", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "a.k.a. Directory ID", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "environment", "label": "Environment", "help_string": "", "required": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": "", "type": "dropdownlist", "value": "public"}, {"name": "user_sourcetype", "label": "User Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:aad:user", "placeholder": "azure:aad:user", "type": "text", "value": "azure:aad:user"}, {"required": true, "name": "endpoint", "label": "Endpoint", "default_value": "v1.0", "placeholder": "", "help_string": "", "possible_values": [{"value": "v1.0", "label": "v1.0"}, {"value": "beta", "label": "Beta"}], "type": "dropdownlist", "format_type": "dropdownlist", "value": "v1.0"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "a.k.a. Directory ID", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "user_sourcetype", "title": "User Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:aad:user", "placeholder": "azure:aad:user"}, {"type": "customized_var", "name": "endpoint", "title": "Endpoint", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "v1.0", "label": "v1.0"}, {"value": "beta", "label": "Beta"}], "format_type": "dropdownlist", "default_value": "v1.0", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport requests\nimport json\nimport dateutil.parser\nimport ta_azure_utils.auth as azauth\nimport ta_azure_utils.utils as azutils\n\ndef validate_input(helper, definition):\n   pass\n\ndef collect_events(helper, ew):\n\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    tenant_id = helper.get_arg(\"tenant_id\")\n    event_source = \"tenant_id:%s\" % tenant_id\n    source_type = helper.get_arg(\"user_sourcetype\")\n    endpoint = helper.get_arg(\"endpoint\")\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        graph_base_url = \"https://graph.microsoft.us\"\n    else:\n        graph_base_url = \"https://graph.microsoft.com\"\n    \n    access_token = azauth.get_graph_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    if(access_token):\n\n        url = graph_base_url + \"/%s/users/\" % endpoint\n        users_response = azutils.get_items_batch(helper, access_token, url)\n        users = users_response['value'] or None\n\n        while users:\n            for user in users:\n                event = helper.new_event(\n                        data = json.dumps(user),\n                        source = event_source, \n                        index = helper.get_output_index(),\n                        sourcetype = source_type)\n                ew.write_event(event)\n\n            sys.stdout.flush()\n            \n            users = None\n            \n            if '@odata.nextLink' in users_response:\n                nextLink = users_response['@odata.nextLink']\n                helper.log_debug(\"_Splunk_ AAD users nextLink URL (@odata.nextLink): %s\" % nextLink)\n\n                # This should never happen, but just in case...\n                if not azutils.is_https(nextLink):\n                    raise ValueError(\"nextLink scheme is not HTTPS. nextLink URL: %s\" % nextLink)\n\n                users_response = azutils.get_items_batch(helper, access_token, nextLink)\n                users = users_response['value']\n\n    else:\n        helper.log_error(\"_Splunk_ Unable to obtain access token\")\n        ", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}, {"name": "environment", "value": "public"}, {"name": "user_sourcetype", "value": "azure:aad:user"}, {"name": "endpoint", "value": "v1.0"}], "description": "Retrieves a list of user objects from Azure Active Directory", "sample_count": 0, "uuid": "355d23ef484f42e1ae7cbd5313692bbd", "title": "Microsoft Azure Active Directory Users"}, {"index": "default", "sourcetype": "ms:aad:signin", "interval": "60", "use_external_validation": true, "streaming_mode_xml": true, "name": "MS_AAD_signins", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "a.k.a. Directory ID", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}, {"name": "environment", "label": "Environment", "help_string": "", "required": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": "", "type": "dropdownlist", "value": "public"}, {"name": "sign_in_sourcetype", "label": "Sign-in Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:aad:signin", "placeholder": "azure:aad:signin", "type": "text", "value": "azure:aad:signin"}, {"name": "start_date", "label": "Start Date", "help_string": "The date/time to start collecting data.  If no value is give, the input will start getting data 24 hours in the past.", "required": false, "format_type": "text", "default_value": "", "placeholder": "YYYY-mm-ddTHH:MM:SSZ", "type": "text", "value": ""}, {"name": "query_window_size", "label": "Query Limit (optional)", "help_string": "Specify the maximum number of minutes used for the query range.  This is useful for retrieving older data. Use this setting with caution.  Specify '0' to disable.", "required": true, "format_type": "text", "default_value": "0", "placeholder": "", "type": "text", "value": "0"}, {"name": "query_backoff_throttle", "label": "Query Backoff Throttle", "help_string": "Advanced: number of seconds to subtract from the end date of the query. This helps accommodate near real-time events toward the end of a query that may arrive non sequentially.", "required": true, "format_type": "text", "default_value": "420", "placeholder": "420", "type": "text", "value": "420"}, {"name": "endpoint", "label": "Endpoint", "help_string": "", "required": true, "possible_values": [{"value": "v1.0", "label": "v1.0"}, {"value": "beta", "label": "Beta"}], "format_type": "dropdownlist", "default_value": "v1.0", "placeholder": "", "type": "dropdownlist", "value": "v1.0"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "a.k.a. Directory ID", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "sign_in_sourcetype", "title": "Sign-in Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:aad:signin", "placeholder": "azure:aad:signin"}, {"type": "customized_var", "name": "start_date", "title": "Start Date", "description": "The date/time to start collecting data.  If no value is give, the input will start getting data 24 hours in the past.", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": "YYYY-mm-ddTHH:MM:SSZ"}, {"type": "customized_var", "name": "query_window_size", "title": "Query Limit (optional)", "description": "Specify the maximum number of minutes used for the query range.  This is useful for retrieving older data. Use this setting with caution.  Specify '0' to disable.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "0", "placeholder": ""}, {"type": "customized_var", "name": "query_backoff_throttle", "title": "Query Backoff Throttle", "description": "Advanced: number of seconds to subtract from the end date of the query. This helps accommodate near real-time events toward the end of a query that may arrive non sequentially.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "420", "placeholder": "420"}, {"type": "customized_var", "name": "endpoint", "title": "Endpoint", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "v1.0", "label": "v1.0"}, {"value": "beta", "label": "Beta"}], "format_type": "dropdownlist", "default_value": "v1.0", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport requests\nimport json\nimport dateutil.parser\nimport ta_azure_utils.auth as azauth\nimport ta_azure_utils.utils as azutils\n\ndef validate_input(helper, definition):\n    \n    try:\n        int(definition.parameters.get('query_window_size'))\n    except ValueError:\n        raise ValueError(\"'Query Limit' should be an integer without commas.\")\n    \n    start_date = definition.parameters.get('start_date')\n    if (start_date not in ['',None]):\n        try:\n            d = dateutil.parser.parse(start_date)\n        except Exception as e:\n            helper.log_error(\"_Splunk_ Invalid date format specified for 'Start Date': %s\" % start_date)\n            raise ValueError(\"Invalid date format specified for 'Start Date': %s\" % start_date)\n        # Make sure the date entered is less than 30 days in the past.\n        # Otherwise, the reporting API will throw an error\n        if d < (datetime.datetime.now() - datetime.timedelta(days=30)):\n            helper.log_error(\"_Splunk_ 'Start Date' cannot be more than 30 days in the past.: \" + start_date)\n            raise ValueError(\"'Start Date' cannot be more than 30 days in the past.\")\n\ndef get_start_date(helper, check_point_key):\n    \n    # Try to get a date from the check point first\n    d = helper.get_check_point(check_point_key)\n    \n    # If there was a check point date, retun it.\n    if (d not in [None,'']):\n        return d\n    else:\n        # No check point date, so look if a start date was specified as an argument\n        start_date = helper.get_arg(\"start_date\")\n        if (start_date not in [None,'']):\n            d = dateutil.parser.parse(start_date)\n            return d.strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n        else:\n            # If there was no start date specified, default to 1 day ago\n            return (datetime.datetime.now() - datetime.timedelta(hours=24)).strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    tenant_id = helper.get_arg(\"tenant_id\")\n    check_point_key = \"aad_signin_last_date_%s\" % helper.get_input_stanza_names()\n    event_source = \"tenant_id:%s\" % tenant_id\n    source_type = helper.get_arg(\"sign_in_sourcetype\")\n    query_window_size = int(helper.get_arg(\"query_window_size\"))\n    query_backoff_throttle = int(helper.get_arg(\"query_backoff_throttle\"))\n    endpoint = helper.get_arg(\"endpoint\")\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        graph_base_url = \"https://graph.microsoft.us\"\n    else:\n        graph_base_url = \"https://graph.microsoft.com\"\n        \n    query_date = get_start_date(helper, check_point_key)\n    access_token = azauth.get_graph_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    if(access_token):\n    \n        if(query_window_size > 0):\n            end_date = azutils.get_end_date(helper, query_date, query_window_size)\n            url = graph_base_url + \"/%s/auditLogs/signIns?$orderby=createdDateTime&$filter=createdDateTime+ge+%s+and+createdDateTime+le+%s\" % (endpoint, query_date, end_date.strftime('%Y-%m-%dT%H:%M:%S.%fZ'))\n            helper.log_debug(\"_Splunk_ Query limit specified: %s\" % str(query_window_size))\n        else:\n            time_throttle_unformatted = datetime.datetime.utcnow() - datetime.timedelta(seconds=query_backoff_throttle)\n            time_throttle = time_throttle_unformatted.strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n            url = graph_base_url + \"/%s/auditLogs/signIns?$orderby=createdDateTime&$filter=createdDateTime+gt+%s+and+createdDateTime+le+%s\" % (endpoint, query_date, time_throttle)\n        helper.log_debug(\"_Splunk_ Sign-in URL used: %s\" % url)\n        max_signinDateTime = query_date\n\n        sign_in_response = azutils.get_items_batch(helper, access_token, url)\n        sign_ins = sign_in_response['value'] or None\n\n        while sign_ins:\n            for sign_in in sign_ins:\n        \n                # Keep track of the largest signinDateTime seen during this query.\n                this_signinDateTime = sign_in[\"createdDateTime\"]\n        \n                if(this_signinDateTime > max_signinDateTime):\n                    max_signinDateTime = this_signinDateTime\n        \n                event = helper.new_event(\n                    data=json.dumps(sign_in),\n                    source=event_source, \n                    index=helper.get_output_index(),\n                    sourcetype=source_type)\n                ew.write_event(event)\n\n            sys.stdout.flush()\n            sign_ins = None\n            \n            # Check point the largest signinDateTime seen during the query\n            helper.save_check_point(check_point_key, max_signinDateTime)\n\n            if '@odata.nextLink' in sign_in_response:\n                nextLink = sign_in_response['@odata.nextLink']\n                helper.log_debug(\"_Splunk_ AAD sign-ins nextLink URL (@odata.nextLink): %s\" % nextLink)\n\n                # This should never happen, but just in case...\n                if not azutils.is_https(nextLink):\n                    raise ValueError(\"nextLink scheme is not HTTPS. nextLink URL: %s\" % nextLink)\n\n                sign_in_response = azutils.get_items_batch(helper, access_token, nextLink)\n                sign_ins = sign_in_response['value'] or None\n    else:\n        helper.log_error(\"_Splunk_ Unable to obtain access token\")", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}, {"name": "environment", "value": "public"}, {"name": "sign_in_sourcetype", "value": "azure:aad:signin"}, {"name": "start_date", "value": ""}, {"name": "query_window_size", "value": "0"}, {"name": "query_backoff_throttle", "value": "420"}, {"name": "endpoint", "value": "v1.0"}], "description": "Collects sign in information from Microsoft Azure Active Directory.", "sample_count": 0, "uuid": "b485434b62b64f18b67c7b49af84ff3b", "title": "Microsoft Azure Active Directory Sign-ins"}, {"index": "default", "sourcetype": "ms:aad:audit", "interval": "60", "use_external_validation": true, "streaming_mode_xml": true, "name": "MS_AAD_audit", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "a.k.a. Directory ID", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "environment", "label": "Environment", "help_string": "", "required": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": "", "type": "dropdownlist", "value": "public"}, {"name": "audit_sourcetype", "label": "Audit Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:aad:audit", "placeholder": "azure:aad:audit", "type": "text", "value": "azure:aad:audit"}, {"name": "start_date", "label": "Start Date", "help_string": "The date/time to start collecting data.  If no value is give, the input will start getting data 7 days in the past.", "required": false, "format_type": "text", "default_value": "", "placeholder": "YYYY-mm-ddTHH:MM:SSZ", "type": "text", "value": ""}, {"name": "query_window_size", "label": "Query Limit  (optional)", "help_string": "Specify the maximum number of minutes used for the query range.  This is useful for retrieving older data. Use this setting with caution.  Specify '0' to disable.", "required": true, "format_type": "text", "default_value": "0", "placeholder": "", "type": "text", "value": "10080"}, {"name": "query_backoff_throttle", "label": "Query Backoff Throttle", "help_string": "Advanced: number of seconds to subtract from the end date of the query. This helps accommodate near real-time events toward the end of a query that may arrive non sequentially.", "required": true, "format_type": "text", "default_value": "420", "placeholder": "420", "type": "text", "value": "420"}, {"required": true, "name": "endpoint", "label": "Endpoint", "default_value": "v1.0", "placeholder": "", "help_string": "", "possible_values": [{"value": "v1.0", "label": "v1.0"}, {"value": "beta", "label": "Beta"}], "type": "dropdownlist", "format_type": "dropdownlist", "value": "v1.0"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "a.k.a. Directory ID", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "audit_sourcetype", "title": "Audit Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:aad:audit", "placeholder": "azure:aad:audit"}, {"type": "customized_var", "name": "start_date", "title": "Start Date", "description": "The date/time to start collecting data.  If no value is give, the input will start getting data 7 days in the past.", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": "YYYY-mm-ddTHH:MM:SSZ"}, {"type": "customized_var", "name": "query_window_size", "title": "Query Limit  (optional)", "description": "Specify the maximum number of minutes used for the query range.  This is useful for retrieving older data. Use this setting with caution.  Specify '0' to disable.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "0", "placeholder": ""}, {"type": "customized_var", "name": "query_backoff_throttle", "title": "Query Backoff Throttle", "description": "Advanced: number of seconds to subtract from the end date of the query. This helps accommodate near real-time events toward the end of a query that may arrive non sequentially.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "420", "placeholder": "420"}, {"type": "customized_var", "name": "endpoint", "title": "Endpoint", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "v1.0", "label": "v1.0"}, {"value": "beta", "label": "Beta"}], "format_type": "dropdownlist", "default_value": "v1.0", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport requests\nimport json\nimport dateutil.parser\nimport ta_azure_utils.auth as azauth\nimport ta_azure_utils.utils as azutils\n\ndef validate_input(helper, definition):\n    try:\n        int(definition.parameters.get('query_window_size'))\n    except ValueError:\n        raise ValueError(\"'Query Limit' should be an integer without commas.\")\n    start_date = definition.parameters.get('start_date', None)\n    if start_date is not None:\n        try:\n            d = dateutil.parser.parse(start_date)\n        except Exception as e:\n            helper.log_error(\"_Splunk_ Invalid date format specified for 'Start Date': %s\" % start_date)\n            raise ValueError(\"Invalid date format specified for 'Start Date': %s\" % start_date)\n        # Make sure the date entered is less than 30 days in the past.\n        # Otherwise, the reporting API will throw an error\n        if d < datetime.datetime.now() - datetime.timedelta(days=30):\n            helper.log_error(\"_Splunk_ 'Start Date' cannot be more than 30 days in the past.: \" + start_date)\n            raise ValueError(\"'Start Date' cannot be more than 30 days in the past.\")\n\ndef get_start_date(helper, check_point_key):\n    \n    # Try to get a date from the check point first\n    d = helper.get_check_point(check_point_key)\n    \n    # If there was a check point date, retun it.\n    if (d not in [None,'']):\n        return d\n    else:\n        # No check point date, so look if a start date was specified as an argument\n        start_date = helper.get_arg(\"start_date\")\n        if (start_date not in [None,'']):\n            d = dateutil.parser.parse(start_date)\n            return d.strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n        else:\n            # If there was no start date specified, default to 7 day ago\n            return (datetime.datetime.now() - datetime.timedelta(days=7)).strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n\ndef collect_events(helper, ew):\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    tenant_id = helper.get_arg(\"tenant_id\")\n    check_point_key = \"aad_audit_last_date_%s\" % helper.get_input_stanza_names()\n    event_source = \"tenant_id:%s\" % tenant_id\n    query_window_size = int(helper.get_arg(\"query_window_size\"))\n    query_backoff_throttle = int(helper.get_arg(\"query_backoff_throttle\"))\n    source_type = helper.get_arg(\"audit_sourcetype\")\n    query_date = get_start_date(helper, check_point_key)\n    endpoint = helper.get_arg(\"endpoint\")\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        graph_base_url = \"https://graph.microsoft.us\"\n    else:\n        graph_base_url = \"https://graph.microsoft.com\"\n        \n    access_token = azauth.get_graph_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    if(access_token):\n        if(query_window_size > 0):\n            end_date = azutils.get_end_date(helper, query_date, query_window_size)\n            url = graph_base_url + \"/%s/auditLogs/directoryAudits?$orderby=activityDateTime&$filter=activityDateTime+ge+%s+and+activityDateTime+le+%s\" % (endpoint, query_date, end_date.strftime('%Y-%m-%dT%H:%M:%S.%fZ'))\n            helper.log_debug(\"_Splunk_ Query limit specified: %s\" % str(query_window_size))\n        else:\n            time_throttle_unformatted = datetime.datetime.utcnow() - datetime.timedelta(seconds=query_backoff_throttle)\n            time_throttle = time_throttle_unformatted.strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n            url = graph_base_url + \"/%s/auditLogs/directoryAudits?$orderby=activityDateTime&$filter=activityDateTime+gt+%s+and+activityDateTime+le+%s\" % (endpoint, query_date, time_throttle)\n        helper.log_debug(\"_Splunk_ Audit URL used: %s\" % url)\n        max_activityDate = query_date\n\n        audit_response = azutils.get_items_batch(helper, access_token, url)\n        audit_events = audit_response['value'] or None\n        \n        while audit_events:\n            for activity in audit_events:\n            \n                # Keep track of the largest activityDate seen during this query.\n                this_activityDate = activity[\"activityDateTime\"]\n            \n                if(this_activityDate > max_activityDate):\n                    max_activityDate = this_activityDate\n            \n                event = helper.new_event(\n                        data=json.dumps(activity),\n                        source=event_source, \n                        index=helper.get_output_index(),\n                        sourcetype=source_type)\n                ew.write_event(event)\n\n            sys.stdout.flush()\n            audit_events = None\n            \n            # Check point the largest activityDate seen during the query\n            helper.save_check_point(check_point_key, max_activityDate)\n\n            if '@odata.nextLink' in audit_response:\n                nextLink = audit_response['@odata.nextLink']\n                helper.log_debug(\"_Splunk_ AAD audit nextLink URL (@odata.nextLink): %s\" % nextLink)\n\n                # This should never happen, but just in case...\n                if not azutils.is_https(nextLink):\n                    raise ValueError(\"nextLink scheme is not HTTPS. nextLink URL: %s\" % nextLink)\n\n                audit_response = azutils.get_items_batch(helper, access_token, nextLink)\n                audit_events = audit_response['value'] or None\n    else:\n        helper.log_error(\"_Splunk_ Unable to obtain access token\")", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}, {"name": "environment", "value": "public"}, {"name": "audit_sourcetype", "value": "azure:aad:audit"}, {"name": "start_date", "value": ""}, {"name": "query_window_size", "value": "0"}, {"name": "query_backoff_throttle", "value": "420"}, {"name": "endpoint", "value": "beta"}], "description": "Collects audit information from Microsoft Azure Active Directory.", "sample_count": 0, "uuid": "ba7a77efc82a456781c5e2eea43d66ac", "title": "Microsoft Azure Active Directory Audit"}, {"index": "default", "sourcetype": "azure:consumption", "interval": "43200", "use_external_validation": true, "streaming_mode_xml": true, "name": "azure_consumption", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "label": "Subscription ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"name": "environment", "label": "Environment", "help_string": "", "required": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": "", "type": "dropdownlist", "value": "public"}, {"name": "billing_sourcetype", "label": "Billing Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:billing", "placeholder": "azure:billing", "type": "text", "value": "azure:billing"}, {"name": "query_days", "label": "Max days to query", "help_string": "Specify the maximum number of days to query each interval.", "required": true, "format_type": "text", "default_value": "10", "placeholder": "10", "type": "text", "value": "10"}, {"name": "start_date", "label": "Start Date (optional)", "help_string": "Defaults to 90 days in the past if empty.", "required": false, "format_type": "text", "default_value": "", "placeholder": "YYYY-MM-DD", "type": "text", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "subscription_id", "title": "Subscription ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "billing_sourcetype", "title": "Billing Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:billing", "placeholder": "azure:billing"}, {"type": "customized_var", "name": "query_days", "title": "Max days to query", "description": "Specify the maximum number of days to query each interval.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "10", "placeholder": "10"}, {"type": "customized_var", "name": "start_date", "title": "Start Date (optional)", "description": "Defaults to 90 days in the past if empty.", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": "YYYY-MM-DD"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport requests\nimport dateutil.parser\nfrom ta_azure_utils.auth import get_mgmt_access_token\nfrom ta_azure_utils.utils import get_items\n\ndef validate_input(helper, definition):\n    try:\n        int(definition.parameters.get('query_days'))\n    except ValueError:\n        raise ValueError(\"'Max days to query' should be an integer without commas.\")\n    \n    start_date = definition.parameters.get('start_date')\n    if (start_date not in ['',None]):\n        try:\n            d = dateutil.parser.parse(start_date)\n        except Exception as e:\n            helper.log_error(\"_Splunk_ Invalid date format specified for 'Start Date': %s\" % start_date)\n            raise ValueError(\"Invalid date format specified for 'Start Date': %s\" % start_date)\n\ndef get_start_date(helper, check_point_key):\n    \n    # Try to get a date from the check point first\n    d = helper.get_check_point(check_point_key)\n    \n    # If there was a check point date, retun it.\n    if (d not in [None,'']):\n        helper.log_debug(\"_Splunk_ Getting start date. Checkpoint date found: %s\" % d)\n        return d\n    else:\n        # No check point date, so look if a start date was specified as an argument\n        start_date = helper.get_arg(\"start_date\")\n        if (start_date not in [None,'']):\n            d = dateutil.parser.parse(start_date)\n            helper.log_debug(\"_Splunk_ Getting start date. Start date in stanza: %s\" % start_date)\n            return d.strftime('%Y-%m-%d')\n        else:\n            # If there was no start date specified, default to 90 day ago\n            d = (datetime.datetime.now() - datetime.timedelta(days=90)).strftime('%Y-%m-%d')\n            helper.log_debug(\"_Splunk_ Getting start date. Calculated start date 90 days in the past: %s\" % str(d))\n            return d\n\ndef get_end_date(helper, query_days, start_date, max_days_ago):\n    dt_start = datetime.datetime.strptime(start_date, \"%Y-%m-%d\").date()\n    dt_end = dt_start + datetime.timedelta(days=query_days)\n    dt_days_ago = datetime.date.today() - datetime.timedelta(days=max_days_ago)\n    helper.log_debug(\"_Splunk_ Getting end date. start: %s, max days: %s, end: %s\" % (dt_start.strftime('%Y-%m-%d'), str(max_days_ago), dt_end.strftime('%Y-%m-%d')))\n    \n    # Adjust the end date if we went too far.\n    if dt_end > dt_days_ago:\n        d = dt_end\n        dt_end = dt_days_ago\n        helper.log_debug(\"_Splunk_ Adjusting end date. Old value: %s, new value: %s\" % (d.strftime('%Y-%m-%d'), dt_end.strftime('%Y-%m-%d')))\n    \n    # If the start date is greater than the end date, return None\n    if dt_start >= dt_end:\n        helper.log_debug(\"_Splunk_ Start date '%s' is greater than or equal to the end date '%s'. Returning 'None'\" % (dt_start.strftime('%Y-%m-%d'), dt_end.strftime('%Y-%m-%d')))\n        return None\n    else:\n        helper.log_debug(\"_Splunk_ Returning end date '%s'.\" % dt_end.strftime('%Y-%m-%d'))\n        return dt_end.strftime('%Y-%m-%d')\n\ndef collect_events(helper, ew):\n\n    import sys, os\n    sys.path.append(os.path.join(os.environ['SPLUNK_HOME'],'etc','apps','SA-VSCode','bin'))\n    import splunk_debug as dbg\n    dbg.enable_debugging(timeout=25)\n    dbg.set_breakpoint()\n\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    subscription_id = helper.get_arg(\"subscription_id\")\n    billing_sourcetype = helper.get_arg(\"billing_sourcetype\")\n    billing_period_sourcetype = helper.get_arg(\"billing_period_sourcetype\")\n    tenant_id = helper.get_arg(\"tenant_id\")\n    query_days = int(helper.get_arg(\"query_days\"))\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        management_base_url = \"https://management.usgovcloudapi.net\"\n    else:\n        management_base_url = \"https://management.azure.com\"\n    \n    billing_check_point_key = \"billing_last_date_%s\" % helper.get_input_stanza_names()\n    api_version = \"2019-10-01\"\n    \n    start_date = get_start_date(helper, billing_check_point_key)\n    end_date = get_end_date(helper, query_days, start_date, max_days_ago=2)\n    \n    access_token = get_mgmt_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    if(access_token) and (end_date is not None):\n\n        header = {'Authorization':'Bearer ' + access_token}\n        usage_url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Consumption/usageDetails?$orderby=properties/usageEnd&$expand=properties/meterDetails,properties/additionalProperties&$filter=properties/usageStart+ge+'%s'+AND properties/usageEnd+le+'%s'&api-version=%s\" % (subscription_id, start_date, end_date, api_version)\n        helper.log_debug(\"_Splunk_ Getting usage events from URL: %s\" % usage_url)\n        \n        usage_data = get_items(helper, access_token, usage_url, [])\n\n        for value in usage_data:\n            event = helper.new_event(\n                data=json.dumps(value),\n                source=helper.get_input_type(),\n                index=helper.get_output_index(),\n                sourcetype=billing_sourcetype)\n            ew.write_event(event)\n\n        helper.save_check_point(billing_check_point_key, end_date)\n        helper.log_debug(\"_Splunk_ Saving check point for usage data. end_date: %s\" % str(end_date))", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "2ed28a74-1f6f-4829-8530-fe359c77d35c"}, {"name": "subscription_id", "value": "ae4ab7c9-dcdf-4427-9729-48e8c7551be9"}, {"name": "environment", "value": "public"}, {"name": "billing_sourcetype", "value": "azure:billing"}, {"name": "query_days", "value": "10"}, {"name": "start_date", "value": ""}], "description": "Gets cost and usage data for your Azure resources", "sample_count": 0, "uuid": "f2fb3eead6474e8fb01fc710a26cad86", "title": "Azure Billing and Consumption"}, {"index": "default", "sourcetype": "azure:security:center", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "azure_security_center_input", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}, {"name": "subscription_id", "label": "Subscription ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "eed64a96-cf9c-4de0-9688-ce7bddb0011b"}, {"name": "environment", "label": "Environment", "help_string": "", "required": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": "", "type": "dropdownlist", "value": "public"}, {"name": "collect_security_center_alerts", "label": "Collect Security Center Alerts", "help_string": "", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": true}, {"name": "security_alert_sourcetype", "label": "Security Alert Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:securityCenter:alert", "placeholder": "azure:securityCenter:alert", "type": "text", "value": "azure:securityCenter:alert"}, {"name": "collect_security_center_tasks", "label": "Collect Security Center Tasks", "help_string": "", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": true}, {"name": "security_task_sourcetype", "label": "Security Task Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:securityCenter:task", "placeholder": "azure:securityCenter:task", "type": "text", "value": "azure:securityCenter:task"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "subscription_id", "title": "Subscription ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "collect_security_center_alerts", "title": "Collect Security Center Alerts", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "security_alert_sourcetype", "title": "Security Alert Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:securityCenter:alert", "placeholder": "azure:securityCenter:alert"}, {"type": "customized_var", "name": "collect_security_center_tasks", "title": "Collect Security Center Tasks", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "security_task_sourcetype", "title": "Security Task Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:securityCenter:task", "placeholder": "azure:securityCenter:task"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport requests\nimport ta_azure_utils.utils as azutil\nimport ta_azure_utils.auth as azauth\n\ndef validate_input(helper, definition):\n    pass\n\ndef collect_events(helper, ew):\n\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    subscription_id = helper.get_arg(\"subscription_id\")\n    tenant_id = helper.get_arg(\"tenant_id\")\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        management_base_url = \"https://management.usgovcloudapi.net\"\n    else:\n        management_base_url = \"https://management.azure.com\"\n    \n    alert_api_version = \"2019-01-01\"\n    alert_sourcetype = helper.get_arg(\"security_alert_sourcetype\")\n    collect_alerts = helper.get_arg(\"collect_security_center_alerts\")\n    alert_check_point_key = \"asc_alert_last_date_%s\" % helper.get_input_stanza_names()\n    alert_check_point = helper.get_check_point(alert_check_point_key)\n    \n    task_api_version = \"2015-06-01-preview\"\n    task_sourcetype = helper.get_arg(\"security_task_sourcetype\")\n    collect_tasks = helper.get_arg(\"collect_security_center_tasks\")\n    task_check_point_key = \"asc_task_last_date_%s\" % helper.get_input_stanza_names()\n    task_check_point = helper.get_check_point(task_check_point_key)\n    \n    access_token = azauth.get_mgmt_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    if(access_token):\n        \n        if(collect_alerts):\n            helper.log_debug(\"_Splunk_ Collecting security alert data. sourcetype='%s'\" % alert_sourcetype)\n            if alert_check_point in [None,'']:\n                helper.log_debug(\"_Splunk_ No security center alert data checkpoint. Collecting all current alerts.\")\n                url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Security/alerts?api-version=%s\" % (subscription_id, alert_api_version)\n                alert_check_point = \"\"\n            else:\n                helper.log_debug(\"_Splunk_ Found security center alert data checkpoint: %s. Collecting events after this detected date/time\" % alert_check_point)\n                url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Security/alerts?api-version=%s&$filter=Properties/DetectedTimeUtc gt %s\" % (subscription_id, alert_api_version, alert_check_point)\n\n            alerts = azutil.get_items(helper, access_token, url, items=[])\n            max_asc_alert_date = alert_check_point\n            \n            for alert in alerts:\n                \n                # Keep track of the largest detected date/time\n                this_detectedTime = alert[\"properties\"][\"detectedTimeUtc\"]\n                if (this_detectedTime > max_asc_alert_date):\n                    max_asc_alert_date = this_detectedTime\n                    \n                event = helper.new_event(\n                    data=json.dumps(alert),\n                    source=\"%s:%s\" % (helper.get_input_type(), tenant_id), \n                    index=helper.get_output_index(),\n                    sourcetype=alert_sourcetype)\n                ew.write_event(event)\n                \n            helper.save_check_point(alert_check_point_key, max_asc_alert_date)\n                \n        if(collect_tasks):\n            helper.log_debug(\"_Splunk_ Collecting security task data. sourcetype='%s'\" % task_sourcetype)\n            if task_check_point in [None,'']:\n                helper.log_debug(\"_Splunk_ No security center task data checkpoint. Collecting all current tasks.\")\n                url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Security/tasks?api-version=%s\" % (subscription_id, task_api_version)\n                task_check_point = ''\n            else:\n                helper.log_debug(\"_Splunk_ Found security center task data checkpoint: %s. Collecting events after this changed date/time\" % task_check_point)\n                url = management_base_url + \"/subscriptions/%s/providers/Microsoft.Security/tasks?api-version=%s&$filter=Properties/LastStateChangeTimeUtc gt %s\" % (subscription_id, task_api_version, task_check_point)\n            \n            tasks = azutil.get_items(helper, access_token, url, items=[])\n            max_asc_task_date = task_check_point\n            \n            for task in tasks:\n                \n                # Keep track of the largest detected date/time\n                this_changedTime = task[\"properties\"][\"lastStateChangeTimeUtc\"]\n                if (this_changedTime > max_asc_task_date):\n                    max_asc_task_date = this_changedTime\n                    \n                event = helper.new_event(\n                    data=json.dumps(task),\n                    source=\"%s:%s\" % (helper.get_input_type(), tenant_id),\n                    index=helper.get_output_index(),\n                    sourcetype=task_sourcetype)\n                ew.write_event(event)\n                \n            helper.save_check_point(task_check_point_key, max_asc_task_date)\n    else:\n        raise RuntimeError(\"Unable to obtain access token. Please check the Client ID, Client Secret, and Tenant ID\")", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}, {"name": "subscription_id", "value": "eed64a96-cf9c-4de0-9688-ce7bddb0011b"}, {"name": "environment", "value": "public"}, {"name": "collect_security_center_alerts", "value": true}, {"name": "security_alert_sourcetype", "value": "azure:securityCenter:alert"}, {"name": "collect_security_center_tasks", "value": true}, {"name": "security_task_sourcetype", "value": "azure:securityCenter:task"}], "description": "Collects Azure Security Center Alerts and Tasks", "sample_count": 0, "uuid": "aca3fbdd5bb34280921c9e7efd96fe25", "title": "Azure Security Center Alerts & Tasks"}, {"index": "default", "sourcetype": "ms:aad:group", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "MS_AAD_group", "title": "Microsoft Azure Active Directory Groups", "description": "Retrieves a list of group objects from Azure Active Directory", "type": "customized", "parameters": [{"name": "azure_app_account", "label": "Azure App Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant ID", "help_string": "a.k.a. Directory ID", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}, {"name": "environment", "label": "Environment", "help_string": "", "required": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": "", "type": "dropdownlist", "value": "public"}, {"name": "group_sourcetype", "label": "Group Sourcetype", "help_string": "", "required": true, "format_type": "text", "default_value": "azure:aad:group", "placeholder": "", "type": "text", "value": "azure:aad:group"}, {"name": "endpoint", "label": "Endpoint", "help_string": "", "required": true, "possible_values": [{"value": "v1.0", "label": "v1.0"}, {"value": "beta", "label": "Beta"}], "format_type": "dropdownlist", "default_value": "v1.0", "placeholder": "", "type": "dropdownlist", "value": "beta"}], "data_inputs_options": [{"type": "customized_var", "name": "azure_app_account", "title": "Azure App Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant ID", "description": "a.k.a. Directory ID", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "environment", "title": "Environment", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "public", "label": "Azure Public"}, {"value": "gov", "label": "Azure Government"}], "format_type": "dropdownlist", "default_value": "public", "placeholder": ""}, {"type": "customized_var", "name": "group_sourcetype", "title": "Group Sourcetype", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "azure:aad:group", "placeholder": ""}, {"type": "customized_var", "name": "endpoint", "title": "Endpoint", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "v1.0", "label": "v1.0"}, {"value": "beta", "label": "Beta"}], "format_type": "dropdownlist", "default_value": "v1.0", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport requests\nimport json\nimport dateutil.parser\nimport ta_azure_utils.auth as azauth\nimport ta_azure_utils.utils as azutils\n\ndef validate_input(helper, definition):\n   pass\n\ndef collect_events(helper, ew):\n\n    global_account = helper.get_arg(\"azure_app_account\")\n    client_id = global_account[\"username\"]\n    client_secret = global_account[\"password\"]\n    tenant_id = helper.get_arg(\"tenant_id\")\n    event_source = \"tenant_id:%s\" % tenant_id\n    source_type = helper.get_arg(\"group_sourcetype\")\n    endpoint = helper.get_arg(\"endpoint\")\n    \n    environment = helper.get_arg(\"environment\")\n    if(environment == \"gov\"):\n        graph_base_url = \"https://graph.microsoft.us\"\n    else:\n        graph_base_url = \"https://graph.microsoft.com\"\n    \n    access_token = azauth.get_graph_access_token(client_id, client_secret, tenant_id, environment, helper)\n    \n    if(access_token):\n\n        url = graph_base_url + \"/%s/groups/\" % endpoint\n        groups_response = azutils.get_items_batch(helper, access_token, url)\n        groups = groups_response['value'] or None\n\n        while groups:\n            for group in groups:\n                event = helper.new_event(\n                        data = json.dumps(group),\n                        source = event_source, \n                        index = helper.get_output_index(),\n                        sourcetype = source_type)\n                ew.write_event(event)\n\n            sys.stdout.flush()\n            \n            groups = None\n            \n            if '@odata.nextLink' in groups_response:\n                nextLink = groups_response['@odata.nextLink']\n                helper.log_debug(\"_Splunk_ AAD groups nextLink URL (@odata.nextLink): %s\" % nextLink)\n\n                # This should never happen, but just in case...\n                if not azutils.is_https(nextLink):\n                    raise ValueError(\"nextLink scheme is not HTTPS. nextLink URL: %s\" % nextLink)\n\n                groups_response = azutils.get_items_batch(helper, access_token, nextLink)\n                groups = groups_response['value']\n\n    else:\n        helper.log_error(\"_Splunk_ Unable to obtain access token\")\n        ", "customized_options": [{"name": "azure_app_account", "value": "account0"}, {"name": "tenant_id", "value": "061954aa-ef7c-46b8-bf3d-cd182004a575"}, {"name": "environment", "value": "public"}, {"name": "group_sourcetype", "value": "azure:aad:group"}, {"name": "endpoint", "value": "v1.0"}], "uuid": "22736e6c24414ca4a31b376a0daa9932", "sample_count": 0}]}, "field_extraction_builder": {"azure:compute:vm": {"data_format": "json"}, "azure:metrics": {"data_format": "json"}, "ms:aad:audit": {"data_format": "json"}, "azure:subscriptions": {"data_format": "json"}, "azure:vnet": {"data_format": "json"}, "azure:resource:group": {"data_format": "json"}, "microsoft:aad:signin": {"data_format": "json"}, "azure:compute:disk": {"data_format": "json"}, "azure:aad:user": {"data_format": "json"}, "azure:billing:period": {"data_format": "json"}, "azure:reservation:recommendation": {"data_format": "json"}, "ms:aad:signin": {"data_format": "json"}, "ms:aad:user": {"data_format": "json"}, "azure:eventhub": {"data_format": "json"}, "azure:virtnet": {"data_format": "json"}, "azure:billing": {"data_format": "json"}, "azure:resourcegraph": {"data_format": "json"}, "azure:aad:audit": {"data_format": "json"}, "azure:aad:signin": {"data_format": "json"}, "azure:compute:vm:instanceView": {"data_format": "json"}, "azure:securityCenter:alert": {"data_format": "json"}, "azure:securityCenter:task": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_port": "8080", "proxy_enabled": false, "proxy_type": "http", "proxy_url": "http://192.168.7.47"}, "log_settings": {"log_level": "DEBUG"}, "credential_settings": []}}, "sourcetype_builder": {"azure:metrics": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "azure_metrics"}}, "ms:aad:audit": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "MS_AAD_audit"}}, "azure:resource:group": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "azure_resource_group"}}, "azure:security:center": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "azure_security_center_input"}}, "azure:consumption": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "azure_consumption"}}, "azure:subscriptions": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "azure_subscription"}}, "azure:reservation:recommendation": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "azure_reservation_recommendation"}}, "ms:aad:signin": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "MS_AAD_signins"}}, "ms:aad:user": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "MS_AAD_user"}}, "azure:eventhub": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "azure_event_hub"}}, "azure:virtnet": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "azure_virtual_network"}}, "azure:comp": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "azure_comp"}}, "azure:topology:automatic": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "azure_topology_automatic"}}, "azure:resourcegraph": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "azure_resource_graph"}}, "azure:topology:man": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "azure_topology_man"}}, "ms:aad:device": {"metadata": {"event_count": 0, "data_input_name": "MS_AAD_device", "extractions_count": 0, "cims_count": 0}}, "azure:aad:risk:detection": {"metadata": {"event_count": 0, "data_input_name": "aad_risk_detection", "extractions_count": 0, "cims_count": 0}}, "ms:aad:group": {"metadata": {"event_count": 0, "data_input_name": "MS_AAD_group", "extractions_count": 0, "cims_count": 0}}}, "validation": {}}